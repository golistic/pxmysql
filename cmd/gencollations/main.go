// Copyright (c) 2022, Geert JM Vanderkelen

package main

import (
	"context"
	"database/sql"
	"flag"
	"fmt"
	"go/format"
	"os"
	"time"

	"golang.org/x/term"

	"github.com/golistic/pxmysql/xmysql"
)

type appFlags struct {
	addr     string
	username string
}

func main() {
	flags := initFlags()

	fmt.Printf("Password for %s (enter for empty): ", flags.username)
	p, err := term.ReadPassword(0)
	if err != nil {
		fmt.Printf("Error: failed reading password (%s)\n", err)
		os.Exit(1)
	}
	fmt.Println()

	cnx, err := xmysql.NewConnection(&xmysql.ConnectConfig{
		Address:  flags.addr,
		Username: flags.username,
		Password: sql.NullString{String: string(p), Valid: true},
		UseTLS:   true,
	})
	if err != nil {
		fmt.Printf("Error: %s\n", err)
		os.Exit(1)
	}

	ses, err := cnx.NewSession(context.Background())
	if err != nil {
		fmt.Printf("Error: %s\n", err)
		os.Exit(1)
	}

	q := "SELECT VERSION()"
	res, err := ses.ExecuteStatement(context.Background(), q)
	if err != nil {
		fmt.Printf("Error: %s\n", err)
		os.Exit(1)
	}
	version := res.Rows[0].Values[0].(string)

	charset := "utf8mb4"
	q = "SELECT id, collation_name AS name " +
		"FROM information_schema.collations WHERE character_set_name = ? ORDER BY id"
	res, err = ses.ExecuteStatement(context.Background(), q, charset)
	if err != nil {
		fmt.Printf("Error: %s\n", err)
		os.Exit(1)
	}

	content := fmt.Sprintf("// Code generated by gencollations. DO NOT EDIT.\n"+
		"// MySQL v%s; generated at %s\n\n"+
		"package xmysql\n\nvar collations = map[string]Collation{\n", version, time.Now().UTC())

	entry := "\"%s\": {ID:      %d, Name:    \"%s\", CharSet: \"%s\",},\n"

	entryID := "%d: \"%s\",\n"

	var ids string
	for _, r := range res.Rows {
		v := r.Values
		content += fmt.Sprintf(entry, v[1].(string), v[0].(uint64), v[1].(string), charset)
		ids += fmt.Sprintf(entryID, v[0].(uint64), v[1].(string))
	}

	content += "}\n"

	content += "\nvar collationIDs = map[uint64]string{\n" + ids + "\n}"

	data, err := format.Source([]byte(content))
	if err != nil {
		fmt.Printf("Error: failed formatting Go code (%s)\n", err)
		os.Exit(1)
	}

	fn := "xmysql/collations_data.go"
	fp, err := os.OpenFile(fn, os.O_WRONLY|os.O_TRUNC, 0666)
	if err != nil {
		fmt.Printf("Error: failed opening %s for writing (%s)\n", fn, err)
		os.Exit(1)
	}
	defer func() { _ = fp.Close() }()

	if _, err := fp.Write(data); err != nil {
		if err != nil {
			fmt.Printf("Error: failed writing to %s (%s)\n", fn, err)
			os.Exit(1)
		}
	}
}

func initFlags() *appFlags {
	f := &appFlags{}
	flag.StringVar(&f.addr, "address", "localhost:33060",
		"address (host with port) of the MySQL Server's X Plugin")
	flag.StringVar(&f.username, "user", "root",
		"user for the connection to the MySQL Server")

	flag.Parse()
	return f
}
