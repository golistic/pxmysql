//
// Copyright (c) 2015, 2023, Oracle and/or its affiliates.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License, version 2.0,
// as published by the Free Software Foundation.
//
// This program is also distributed with certain software (including
// but not limited to OpenSSL) that is licensed under separate terms,
// as designated in a particular file or component or in included license
// documentation.  The authors of MySQL hereby grant you an additional
// permission to link the program and your derivative works with the
// separately licensed software that they have included with MySQL.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License, version 2.0, for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.4
// source: mysqlx_expect.proto

// ifdef PROTOBUF_LITE: option optimize_for = LITE_RUNTIME;

//*
//@namespace Mysqlx::Expect
//@brief Expect operations
//
//@par Tip
//For more information, see @ref mysqlx_protocol_expectations "Expectations".

package mysqlxexpect

import (
	_ "github.com/golistic/pxmysql/internal/mysqlx/mysqlx"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Open_CtxOperation int32

const (
	// * copy the operations from the parent Expect-block
	Open_EXPECT_CTX_COPY_PREV Open_CtxOperation = 0
	// * start with a empty set of operations
	Open_EXPECT_CTX_EMPTY Open_CtxOperation = 1
)

// Enum value maps for Open_CtxOperation.
var (
	Open_CtxOperation_name = map[int32]string{
		0: "EXPECT_CTX_COPY_PREV",
		1: "EXPECT_CTX_EMPTY",
	}
	Open_CtxOperation_value = map[string]int32{
		"EXPECT_CTX_COPY_PREV": 0,
		"EXPECT_CTX_EMPTY":     1,
	}
)

func (x Open_CtxOperation) Enum() *Open_CtxOperation {
	p := new(Open_CtxOperation)
	*p = x
	return p
}

func (x Open_CtxOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Open_CtxOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_mysqlx_expect_proto_enumTypes[0].Descriptor()
}

func (Open_CtxOperation) Type() protoreflect.EnumType {
	return &file_mysqlx_expect_proto_enumTypes[0]
}

func (x Open_CtxOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Open_CtxOperation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Open_CtxOperation(num)
	return nil
}

// Deprecated: Use Open_CtxOperation.Descriptor instead.
func (Open_CtxOperation) EnumDescriptor() ([]byte, []int) {
	return file_mysqlx_expect_proto_rawDescGZIP(), []int{0, 0}
}

type Open_Condition_Key int32

const (
	// * Change error propagation behaviour
	Open_Condition_EXPECT_NO_ERROR Open_Condition_Key = 1
	// * Check if X Protocol field exists
	Open_Condition_EXPECT_FIELD_EXIST Open_Condition_Key = 2
	// * Check if X Protocol supports document _id generation
	Open_Condition_EXPECT_DOCID_GENERATED Open_Condition_Key = 3
)

// Enum value maps for Open_Condition_Key.
var (
	Open_Condition_Key_name = map[int32]string{
		1: "EXPECT_NO_ERROR",
		2: "EXPECT_FIELD_EXIST",
		3: "EXPECT_DOCID_GENERATED",
	}
	Open_Condition_Key_value = map[string]int32{
		"EXPECT_NO_ERROR":        1,
		"EXPECT_FIELD_EXIST":     2,
		"EXPECT_DOCID_GENERATED": 3,
	}
)

func (x Open_Condition_Key) Enum() *Open_Condition_Key {
	p := new(Open_Condition_Key)
	*p = x
	return p
}

func (x Open_Condition_Key) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Open_Condition_Key) Descriptor() protoreflect.EnumDescriptor {
	return file_mysqlx_expect_proto_enumTypes[1].Descriptor()
}

func (Open_Condition_Key) Type() protoreflect.EnumType {
	return &file_mysqlx_expect_proto_enumTypes[1]
}

func (x Open_Condition_Key) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Open_Condition_Key) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Open_Condition_Key(num)
	return nil
}

// Deprecated: Use Open_Condition_Key.Descriptor instead.
func (Open_Condition_Key) EnumDescriptor() ([]byte, []int) {
	return file_mysqlx_expect_proto_rawDescGZIP(), []int{0, 0, 0}
}

type Open_Condition_ConditionOperation int32

const (
	// * set the condition; set, if not set; overwrite, if set
	Open_Condition_EXPECT_OP_SET Open_Condition_ConditionOperation = 0
	// * unset the condition
	Open_Condition_EXPECT_OP_UNSET Open_Condition_ConditionOperation = 1
)

// Enum value maps for Open_Condition_ConditionOperation.
var (
	Open_Condition_ConditionOperation_name = map[int32]string{
		0: "EXPECT_OP_SET",
		1: "EXPECT_OP_UNSET",
	}
	Open_Condition_ConditionOperation_value = map[string]int32{
		"EXPECT_OP_SET":   0,
		"EXPECT_OP_UNSET": 1,
	}
)

func (x Open_Condition_ConditionOperation) Enum() *Open_Condition_ConditionOperation {
	p := new(Open_Condition_ConditionOperation)
	*p = x
	return p
}

func (x Open_Condition_ConditionOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Open_Condition_ConditionOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_mysqlx_expect_proto_enumTypes[2].Descriptor()
}

func (Open_Condition_ConditionOperation) Type() protoreflect.EnumType {
	return &file_mysqlx_expect_proto_enumTypes[2]
}

func (x Open_Condition_ConditionOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Open_Condition_ConditionOperation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Open_Condition_ConditionOperation(num)
	return nil
}

// Deprecated: Use Open_Condition_ConditionOperation.Descriptor instead.
func (Open_Condition_ConditionOperation) EnumDescriptor() ([]byte, []int) {
	return file_mysqlx_expect_proto_rawDescGZIP(), []int{0, 0, 1}
}

// *
// Open an Expect block and set/unset the conditions that have to
// be fulfilled.
//
// If any of the conditions fail, all enclosed messages will fail
// with a “Mysqlx::Error“ message.
//
// @returns @ref Mysqlx::Ok on success, @ref Mysqlx::Error on error
type Open struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op   *Open_CtxOperation `protobuf:"varint,1,opt,name=op,enum=Mysqlx.Expect.Open_CtxOperation,def=0" json:"op,omitempty"`
	Cond []*Open_Condition  `protobuf:"bytes,2,rep,name=cond" json:"cond,omitempty"`
}

// Default values for Open fields.
const (
	Default_Open_Op = Open_EXPECT_CTX_COPY_PREV
)

func (x *Open) Reset() {
	*x = Open{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_expect_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Open) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Open) ProtoMessage() {}

func (x *Open) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_expect_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Open.ProtoReflect.Descriptor instead.
func (*Open) Descriptor() ([]byte, []int) {
	return file_mysqlx_expect_proto_rawDescGZIP(), []int{0}
}

func (x *Open) GetOp() Open_CtxOperation {
	if x != nil && x.Op != nil {
		return *x.Op
	}
	return Default_Open_Op
}

func (x *Open) GetCond() []*Open_Condition {
	if x != nil {
		return x.Cond
	}
	return nil
}

// *
// Close a Expect block.
//
// Closing a Expect block restores the state of the previous Expect
// block for the following messages.
//
// @returns @ref Mysqlx::Ok on success,  @ref Mysqlx::Error on error
type Close struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Close) Reset() {
	*x = Close{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_expect_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Close) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Close) ProtoMessage() {}

func (x *Close) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_expect_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Close.ProtoReflect.Descriptor instead.
func (*Close) Descriptor() ([]byte, []int) {
	return file_mysqlx_expect_proto_rawDescGZIP(), []int{1}
}

type Open_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionKey   *uint32                            `protobuf:"varint,1,req,name=condition_key,json=conditionKey" json:"condition_key,omitempty"`
	ConditionValue []byte                             `protobuf:"bytes,2,opt,name=condition_value,json=conditionValue" json:"condition_value,omitempty"`
	Op             *Open_Condition_ConditionOperation `protobuf:"varint,3,opt,name=op,enum=Mysqlx.Expect.Open_Condition_ConditionOperation,def=0" json:"op,omitempty"`
}

// Default values for Open_Condition fields.
const (
	Default_Open_Condition_Op = Open_Condition_EXPECT_OP_SET
)

func (x *Open_Condition) Reset() {
	*x = Open_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_expect_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Open_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Open_Condition) ProtoMessage() {}

func (x *Open_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_expect_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Open_Condition.ProtoReflect.Descriptor instead.
func (*Open_Condition) Descriptor() ([]byte, []int) {
	return file_mysqlx_expect_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Open_Condition) GetConditionKey() uint32 {
	if x != nil && x.ConditionKey != nil {
		return *x.ConditionKey
	}
	return 0
}

func (x *Open_Condition) GetConditionValue() []byte {
	if x != nil {
		return x.ConditionValue
	}
	return nil
}

func (x *Open_Condition) GetOp() Open_Condition_ConditionOperation {
	if x != nil && x.Op != nil {
		return *x.Op
	}
	return Default_Open_Condition_Op
}

var File_mysqlx_expect_proto protoreflect.FileDescriptor

var file_mysqlx_expect_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x1a, 0x0c, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x82, 0x04, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x46, 0x0a, 0x02, 0x6f,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78,
	0x2e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x2e, 0x43, 0x74, 0x78,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x14, 0x45, 0x58, 0x50, 0x45, 0x43,
	0x54, 0x5f, 0x43, 0x54, 0x58, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x52,
	0x02, 0x6f, 0x70, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x63, 0x6f, 0x6e, 0x64, 0x1a, 0xb8, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x4f, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x0d, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x4f, 0x50, 0x5f, 0x53, 0x45, 0x54, 0x52,
	0x02, 0x6f, 0x70, 0x22, 0x4e, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x58,
	0x50, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x58, 0x50, 0x45, 0x43,
	0x54, 0x5f, 0x44, 0x4f, 0x43, 0x49, 0x44, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x22, 0x3c, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x58, 0x50,
	0x45, 0x43, 0x54, 0x5f, 0x4f, 0x50, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x01, 0x22, 0x3e, 0x0a, 0x0c, 0x43, 0x74, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x54, 0x58, 0x5f,
	0x43, 0x4f, 0x50, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x58, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x54, 0x58, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10,
	0x01, 0x3a, 0x04, 0x88, 0xea, 0x30, 0x18, 0x22, 0x0d, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x3a, 0x04, 0x88, 0xea, 0x30, 0x19, 0x42, 0x19, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x79,
	0x73, 0x71, 0x6c, 0x2e, 0x63, 0x6a, 0x2e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66,
}

var (
	file_mysqlx_expect_proto_rawDescOnce sync.Once
	file_mysqlx_expect_proto_rawDescData = file_mysqlx_expect_proto_rawDesc
)

func file_mysqlx_expect_proto_rawDescGZIP() []byte {
	file_mysqlx_expect_proto_rawDescOnce.Do(func() {
		file_mysqlx_expect_proto_rawDescData = protoimpl.X.CompressGZIP(file_mysqlx_expect_proto_rawDescData)
	})
	return file_mysqlx_expect_proto_rawDescData
}

var file_mysqlx_expect_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_mysqlx_expect_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_mysqlx_expect_proto_goTypes = []interface{}{
	(Open_CtxOperation)(0),                 // 0: Mysqlx.Expect.Open.CtxOperation
	(Open_Condition_Key)(0),                // 1: Mysqlx.Expect.Open.Condition.Key
	(Open_Condition_ConditionOperation)(0), // 2: Mysqlx.Expect.Open.Condition.ConditionOperation
	(*Open)(nil),                           // 3: Mysqlx.Expect.Open
	(*Close)(nil),                          // 4: Mysqlx.Expect.Close
	(*Open_Condition)(nil),                 // 5: Mysqlx.Expect.Open.Condition
}
var file_mysqlx_expect_proto_depIdxs = []int32{
	0, // 0: Mysqlx.Expect.Open.op:type_name -> Mysqlx.Expect.Open.CtxOperation
	5, // 1: Mysqlx.Expect.Open.cond:type_name -> Mysqlx.Expect.Open.Condition
	2, // 2: Mysqlx.Expect.Open.Condition.op:type_name -> Mysqlx.Expect.Open.Condition.ConditionOperation
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_mysqlx_expect_proto_init() }
func file_mysqlx_expect_proto_init() {
	if File_mysqlx_expect_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mysqlx_expect_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Open); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_expect_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Close); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_expect_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Open_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mysqlx_expect_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mysqlx_expect_proto_goTypes,
		DependencyIndexes: file_mysqlx_expect_proto_depIdxs,
		EnumInfos:         file_mysqlx_expect_proto_enumTypes,
		MessageInfos:      file_mysqlx_expect_proto_msgTypes,
	}.Build()
	File_mysqlx_expect_proto = out.File
	file_mysqlx_expect_proto_rawDesc = nil
	file_mysqlx_expect_proto_goTypes = nil
	file_mysqlx_expect_proto_depIdxs = nil
}
