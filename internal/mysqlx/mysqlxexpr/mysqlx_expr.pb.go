//
// Copyright (c) 2015, 2021, Oracle and/or its affiliates.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License, version 2.0,
// as published by the Free Software Foundation.
//
// This program is also distributed with certain software (including
// but not limited to OpenSSL) that is licensed under separate terms,
// as designated in a particular file or component or in included license
// documentation.  The authors of MySQL hereby grant you an additional
// permission to link the program and your derivative works with the
// separately licensed software that they have included with MySQL.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License, version 2.0, for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.11
// source: mysqlx_expr.proto

// ifdef PROTOBUF_LITE: option optimize_for = LITE_RUNTIME;

//*
//@namespace Mysqlx::Expr
//@brief Expressions
//
//Expression syntax
//
//expr is the fundamental structure in various places of the SQL language:
//
//-  ``SELECT <expr> AS ...``
//
//-  ``WHERE <expr>``
//
//The structures can be used to:
//-  build an Item-tree in the MySQL Server
//-  generate SQL from it
//-  use as filter condition in CRUD ``Find()``, ``Update()``, and
//``Delete()`` calls.

package mysqlxexpr

import (
	mysqlxdatatypes "github.com/golistic/pxmysql/internal/mysqlx/mysqlxdatatypes"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Expr_Type int32

const (
	Expr_IDENT       Expr_Type = 1
	Expr_LITERAL     Expr_Type = 2
	Expr_VARIABLE    Expr_Type = 3
	Expr_FUNC_CALL   Expr_Type = 4
	Expr_OPERATOR    Expr_Type = 5
	Expr_PLACEHOLDER Expr_Type = 6
	Expr_OBJECT      Expr_Type = 7
	Expr_ARRAY       Expr_Type = 8
)

// Enum value maps for Expr_Type.
var (
	Expr_Type_name = map[int32]string{
		1: "IDENT",
		2: "LITERAL",
		3: "VARIABLE",
		4: "FUNC_CALL",
		5: "OPERATOR",
		6: "PLACEHOLDER",
		7: "OBJECT",
		8: "ARRAY",
	}
	Expr_Type_value = map[string]int32{
		"IDENT":       1,
		"LITERAL":     2,
		"VARIABLE":    3,
		"FUNC_CALL":   4,
		"OPERATOR":    5,
		"PLACEHOLDER": 6,
		"OBJECT":      7,
		"ARRAY":       8,
	}
)

func (x Expr_Type) Enum() *Expr_Type {
	p := new(Expr_Type)
	*p = x
	return p
}

func (x Expr_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Expr_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mysqlx_expr_proto_enumTypes[0].Descriptor()
}

func (Expr_Type) Type() protoreflect.EnumType {
	return &file_mysqlx_expr_proto_enumTypes[0]
}

func (x Expr_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Expr_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Expr_Type(num)
	return nil
}

// Deprecated: Use Expr_Type.Descriptor instead.
func (Expr_Type) EnumDescriptor() ([]byte, []int) {
	return file_mysqlx_expr_proto_rawDescGZIP(), []int{0, 0}
}

type DocumentPathItem_Type int32

const (
	// *  .member
	DocumentPathItem_MEMBER DocumentPathItem_Type = 1
	// * \.*
	DocumentPathItem_MEMBER_ASTERISK DocumentPathItem_Type = 2
	// * [index]
	DocumentPathItem_ARRAY_INDEX DocumentPathItem_Type = 3
	// * [*]
	DocumentPathItem_ARRAY_INDEX_ASTERISK DocumentPathItem_Type = 4
	// * **
	DocumentPathItem_DOUBLE_ASTERISK DocumentPathItem_Type = 5
)

// Enum value maps for DocumentPathItem_Type.
var (
	DocumentPathItem_Type_name = map[int32]string{
		1: "MEMBER",
		2: "MEMBER_ASTERISK",
		3: "ARRAY_INDEX",
		4: "ARRAY_INDEX_ASTERISK",
		5: "DOUBLE_ASTERISK",
	}
	DocumentPathItem_Type_value = map[string]int32{
		"MEMBER":               1,
		"MEMBER_ASTERISK":      2,
		"ARRAY_INDEX":          3,
		"ARRAY_INDEX_ASTERISK": 4,
		"DOUBLE_ASTERISK":      5,
	}
)

func (x DocumentPathItem_Type) Enum() *DocumentPathItem_Type {
	p := new(DocumentPathItem_Type)
	*p = x
	return p
}

func (x DocumentPathItem_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentPathItem_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mysqlx_expr_proto_enumTypes[1].Descriptor()
}

func (DocumentPathItem_Type) Type() protoreflect.EnumType {
	return &file_mysqlx_expr_proto_enumTypes[1]
}

func (x DocumentPathItem_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DocumentPathItem_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DocumentPathItem_Type(num)
	return nil
}

// Deprecated: Use DocumentPathItem_Type.Descriptor instead.
func (DocumentPathItem_Type) EnumDescriptor() ([]byte, []int) {
	return file_mysqlx_expr_proto_rawDescGZIP(), []int{2, 0}
}

// *
// The "root" of the expression tree.
//
// If expression type is PLACEHOLDER, then it refers to the value
// of a parameter specified when executing a statement (see args
// field of StmtExecute command). Field position (which must be
// present for such an expression) gives 0-based position of the
// parameter in the parameter list.
//
// @par production list
// @code{unparsed}
// expr: operator |
// : identifier |
// : function_call |
// : variable |
// : literal |
// : object |
// : array |
// : placeholder
// @endcode
type Expr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         *Expr_Type              `protobuf:"varint,1,req,name=type,enum=Mysqlx.Expr.Expr_Type" json:"type,omitempty"`
	Identifier   *ColumnIdentifier       `protobuf:"bytes,2,opt,name=identifier" json:"identifier,omitempty"`
	Variable     *string                 `protobuf:"bytes,3,opt,name=variable" json:"variable,omitempty"`
	Literal      *mysqlxdatatypes.Scalar `protobuf:"bytes,4,opt,name=literal" json:"literal,omitempty"`
	FunctionCall *FunctionCall           `protobuf:"bytes,5,opt,name=function_call,json=functionCall" json:"function_call,omitempty"`
	Operator     *Operator               `protobuf:"bytes,6,opt,name=operator" json:"operator,omitempty"`
	Position     *uint32                 `protobuf:"varint,7,opt,name=position" json:"position,omitempty"`
	Object       *Object                 `protobuf:"bytes,8,opt,name=object" json:"object,omitempty"`
	Array        *Array                  `protobuf:"bytes,9,opt,name=array" json:"array,omitempty"`
}

func (x *Expr) Reset() {
	*x = Expr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_expr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr) ProtoMessage() {}

func (x *Expr) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_expr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr.ProtoReflect.Descriptor instead.
func (*Expr) Descriptor() ([]byte, []int) {
	return file_mysqlx_expr_proto_rawDescGZIP(), []int{0}
}

func (x *Expr) GetType() Expr_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Expr_IDENT
}

func (x *Expr) GetIdentifier() *ColumnIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Expr) GetVariable() string {
	if x != nil && x.Variable != nil {
		return *x.Variable
	}
	return ""
}

func (x *Expr) GetLiteral() *mysqlxdatatypes.Scalar {
	if x != nil {
		return x.Literal
	}
	return nil
}

func (x *Expr) GetFunctionCall() *FunctionCall {
	if x != nil {
		return x.FunctionCall
	}
	return nil
}

func (x *Expr) GetOperator() *Operator {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *Expr) GetPosition() uint32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

func (x *Expr) GetObject() *Object {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *Expr) GetArray() *Array {
	if x != nil {
		return x.Array
	}
	return nil
}

// *
// Identifier: name, schame.name
//
// @par production list
// @code{unparsed}
// identifier: string "." string |
// : string
// @endcode
type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	SchemaName *string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName" json:"schema_name,omitempty"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_expr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_expr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_mysqlx_expr_proto_rawDescGZIP(), []int{1}
}

func (x *Identifier) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Identifier) GetSchemaName() string {
	if x != nil && x.SchemaName != nil {
		return *x.SchemaName
	}
	return ""
}

// *
// Document path item
//
// @par production list
// @code{unparsed}
// document_path: path_item | path_item document_path
// path_item    : member | array_index | "**"
// member       : "." string | "." "*"
// array_index  : "[" number "]" | "[" "*" "]"
// @endcode
type DocumentPathItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *DocumentPathItem_Type `protobuf:"varint,1,req,name=type,enum=Mysqlx.Expr.DocumentPathItem_Type" json:"type,omitempty"`
	Value *string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	// * used in case of ARRY_INDEX
	Index *uint32 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
}

func (x *DocumentPathItem) Reset() {
	*x = DocumentPathItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_expr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentPathItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentPathItem) ProtoMessage() {}

func (x *DocumentPathItem) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_expr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentPathItem.ProtoReflect.Descriptor instead.
func (*DocumentPathItem) Descriptor() ([]byte, []int) {
	return file_mysqlx_expr_proto_rawDescGZIP(), []int{2}
}

func (x *DocumentPathItem) GetType() DocumentPathItem_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DocumentPathItem_MEMBER
}

func (x *DocumentPathItem) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *DocumentPathItem) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

// *
// Column identifier
//
// for table: col\@doc_path, tbl.col\@doc_path col, tbl.col, schema.tbl.col
// for document collection: doc_path
// //
// @par production list
// @code{unparsed}
// col_identifier: string "." string "." string |
// : string "." string |
// : string |
// : string "." string "." string "@" document_path |
// : string "." string "@" document_path |
// : string "@" document_path |
// : document_path
// document_path: member | arrayLocation | doubleAsterisk
// member = "." string | "." "*"
// arrayLocation = "[" index "]" | "[" "*" "]"
// doubleAsterisk = "**"
// @endcode
type ColumnIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * document path
	DocumentPath []*DocumentPathItem `protobuf:"bytes,1,rep,name=document_path,json=documentPath" json:"document_path,omitempty"`
	// * name of column
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// * name of table
	TableName *string `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	// * name of schema
	SchemaName *string `protobuf:"bytes,4,opt,name=schema_name,json=schemaName" json:"schema_name,omitempty"`
}

func (x *ColumnIdentifier) Reset() {
	*x = ColumnIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_expr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnIdentifier) ProtoMessage() {}

func (x *ColumnIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_expr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnIdentifier.ProtoReflect.Descriptor instead.
func (*ColumnIdentifier) Descriptor() ([]byte, []int) {
	return file_mysqlx_expr_proto_rawDescGZIP(), []int{3}
}

func (x *ColumnIdentifier) GetDocumentPath() []*DocumentPathItem {
	if x != nil {
		return x.DocumentPath
	}
	return nil
}

func (x *ColumnIdentifier) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ColumnIdentifier) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *ColumnIdentifier) GetSchemaName() string {
	if x != nil && x.SchemaName != nil {
		return *x.SchemaName
	}
	return ""
}

// *
// Function call: “func(a, b, "1", 3)“
//
// @par production list
// @code{unparsed}
// function_call: `identifier` "(" [ `expr` ["," `expr` ]* ] ")"
// @endcode
type FunctionCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * identifier of function; at least name of it
	Name *Identifier `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// * list of parameters
	Param []*Expr `protobuf:"bytes,2,rep,name=param" json:"param,omitempty"`
}

func (x *FunctionCall) Reset() {
	*x = FunctionCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_expr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCall) ProtoMessage() {}

func (x *FunctionCall) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_expr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCall.ProtoReflect.Descriptor instead.
func (*FunctionCall) Descriptor() ([]byte, []int) {
	return file_mysqlx_expr_proto_rawDescGZIP(), []int{4}
}

func (x *FunctionCall) GetName() *Identifier {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *FunctionCall) GetParam() []*Expr {
	if x != nil {
		return x.Param
	}
	return nil
}

type Operator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * name of operator
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// * list of parameters
	Param []*Expr `protobuf:"bytes,2,rep,name=param" json:"param,omitempty"`
}

func (x *Operator) Reset() {
	*x = Operator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_expr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator) ProtoMessage() {}

func (x *Operator) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_expr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator.ProtoReflect.Descriptor instead.
func (*Operator) Descriptor() ([]byte, []int) {
	return file_mysqlx_expr_proto_rawDescGZIP(), []int{5}
}

func (x *Operator) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Operator) GetParam() []*Expr {
	if x != nil {
		return x.Param
	}
	return nil
}

// *
// An object (with expression values)
type Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * list of fields
	Fld []*Object_ObjectField `protobuf:"bytes,1,rep,name=fld" json:"fld,omitempty"`
}

func (x *Object) Reset() {
	*x = Object{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_expr_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Object) ProtoMessage() {}

func (x *Object) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_expr_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Object.ProtoReflect.Descriptor instead.
func (*Object) Descriptor() ([]byte, []int) {
	return file_mysqlx_expr_proto_rawDescGZIP(), []int{6}
}

func (x *Object) GetFld() []*Object_ObjectField {
	if x != nil {
		return x.Fld
	}
	return nil
}

// *
// An array of expressions
type Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * list of values
	Value []*Expr `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (x *Array) Reset() {
	*x = Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_expr_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Array) ProtoMessage() {}

func (x *Array) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_expr_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Array.ProtoReflect.Descriptor instead.
func (*Array) Descriptor() ([]byte, []int) {
	return file_mysqlx_expr_proto_rawDescGZIP(), []int{7}
}

func (x *Array) GetValue() []*Expr {
	if x != nil {
		return x.Value
	}
	return nil
}

type Object_ObjectField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * identifier of field
	Key *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	// * value of field
	Value *Expr `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *Object_ObjectField) Reset() {
	*x = Object_ObjectField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_expr_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Object_ObjectField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Object_ObjectField) ProtoMessage() {}

func (x *Object_ObjectField) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_expr_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Object_ObjectField.ProtoReflect.Descriptor instead.
func (*Object_ObjectField) Descriptor() ([]byte, []int) {
	return file_mysqlx_expr_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Object_ObjectField) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Object_ObjectField) GetValue() *Expr {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_mysqlx_expr_proto protoreflect.FileDescriptor

var file_mysqlx_expr_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x1a, 0x16, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x04, 0x0a, 0x04, 0x45, 0x78, 0x70,
	0x72, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x6c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x79, 0x73, 0x71,
	0x6c, 0x78, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x52, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x3e, 0x0a, 0x0d,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x0c,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x31, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x79,
	0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x22, 0x71, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x49, 0x54, 0x45, 0x52, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x04, 0x12,
	0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x0f, 0x0a,
	0x0b, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0a,
	0x0a, 0x06, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x52,
	0x52, 0x41, 0x59, 0x10, 0x08, 0x22, 0x41, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x10, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x36, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x4d, 0x79,
	0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x67, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x4d,
	0x42, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f,
	0x41, 0x53, 0x54, 0x45, 0x52, 0x49, 0x53, 0x4b, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x52,
	0x52, 0x41, 0x59, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x41,
	0x52, 0x52, 0x41, 0x59, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x41, 0x53, 0x54, 0x45, 0x52,
	0x49, 0x53, 0x4b, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f,
	0x41, 0x53, 0x54, 0x45, 0x52, 0x49, 0x53, 0x4b, 0x10, 0x05, 0x22, 0xaa, 0x01, 0x0a, 0x10, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x42, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x47, 0x0a,
	0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d,
	0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x85, 0x01, 0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x31, 0x0a, 0x03, 0x66, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x03, 0x66, 0x6c, 0x64, 0x1a, 0x48, 0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x30,
	0x0a, 0x05, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x19, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x63, 0x6a,
	0x2e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
}

var (
	file_mysqlx_expr_proto_rawDescOnce sync.Once
	file_mysqlx_expr_proto_rawDescData = file_mysqlx_expr_proto_rawDesc
)

func file_mysqlx_expr_proto_rawDescGZIP() []byte {
	file_mysqlx_expr_proto_rawDescOnce.Do(func() {
		file_mysqlx_expr_proto_rawDescData = protoimpl.X.CompressGZIP(file_mysqlx_expr_proto_rawDescData)
	})
	return file_mysqlx_expr_proto_rawDescData
}

var file_mysqlx_expr_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_mysqlx_expr_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_mysqlx_expr_proto_goTypes = []interface{}{
	(Expr_Type)(0),                 // 0: Mysqlx.Expr.Expr.Type
	(DocumentPathItem_Type)(0),     // 1: Mysqlx.Expr.DocumentPathItem.Type
	(*Expr)(nil),                   // 2: Mysqlx.Expr.Expr
	(*Identifier)(nil),             // 3: Mysqlx.Expr.Identifier
	(*DocumentPathItem)(nil),       // 4: Mysqlx.Expr.DocumentPathItem
	(*ColumnIdentifier)(nil),       // 5: Mysqlx.Expr.ColumnIdentifier
	(*FunctionCall)(nil),           // 6: Mysqlx.Expr.FunctionCall
	(*Operator)(nil),               // 7: Mysqlx.Expr.Operator
	(*Object)(nil),                 // 8: Mysqlx.Expr.Object
	(*Array)(nil),                  // 9: Mysqlx.Expr.Array
	(*Object_ObjectField)(nil),     // 10: Mysqlx.Expr.Object.ObjectField
	(*mysqlxdatatypes.Scalar)(nil), // 11: Mysqlx.Datatypes.Scalar
}
var file_mysqlx_expr_proto_depIdxs = []int32{
	0,  // 0: Mysqlx.Expr.Expr.type:type_name -> Mysqlx.Expr.Expr.Type
	5,  // 1: Mysqlx.Expr.Expr.identifier:type_name -> Mysqlx.Expr.ColumnIdentifier
	11, // 2: Mysqlx.Expr.Expr.literal:type_name -> Mysqlx.Datatypes.Scalar
	6,  // 3: Mysqlx.Expr.Expr.function_call:type_name -> Mysqlx.Expr.FunctionCall
	7,  // 4: Mysqlx.Expr.Expr.operator:type_name -> Mysqlx.Expr.Operator
	8,  // 5: Mysqlx.Expr.Expr.object:type_name -> Mysqlx.Expr.Object
	9,  // 6: Mysqlx.Expr.Expr.array:type_name -> Mysqlx.Expr.Array
	1,  // 7: Mysqlx.Expr.DocumentPathItem.type:type_name -> Mysqlx.Expr.DocumentPathItem.Type
	4,  // 8: Mysqlx.Expr.ColumnIdentifier.document_path:type_name -> Mysqlx.Expr.DocumentPathItem
	3,  // 9: Mysqlx.Expr.FunctionCall.name:type_name -> Mysqlx.Expr.Identifier
	2,  // 10: Mysqlx.Expr.FunctionCall.param:type_name -> Mysqlx.Expr.Expr
	2,  // 11: Mysqlx.Expr.Operator.param:type_name -> Mysqlx.Expr.Expr
	10, // 12: Mysqlx.Expr.Object.fld:type_name -> Mysqlx.Expr.Object.ObjectField
	2,  // 13: Mysqlx.Expr.Array.value:type_name -> Mysqlx.Expr.Expr
	2,  // 14: Mysqlx.Expr.Object.ObjectField.value:type_name -> Mysqlx.Expr.Expr
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_mysqlx_expr_proto_init() }
func file_mysqlx_expr_proto_init() {
	if File_mysqlx_expr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mysqlx_expr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_expr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_expr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentPathItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_expr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_expr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_expr_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_expr_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Object); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_expr_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_expr_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Object_ObjectField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mysqlx_expr_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mysqlx_expr_proto_goTypes,
		DependencyIndexes: file_mysqlx_expr_proto_depIdxs,
		EnumInfos:         file_mysqlx_expr_proto_enumTypes,
		MessageInfos:      file_mysqlx_expr_proto_msgTypes,
	}.Build()
	File_mysqlx_expr_proto = out.File
	file_mysqlx_expr_proto_rawDesc = nil
	file_mysqlx_expr_proto_goTypes = nil
	file_mysqlx_expr_proto_depIdxs = nil
}
