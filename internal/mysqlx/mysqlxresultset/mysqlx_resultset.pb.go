//
// Copyright (c) 2015, 2022, Oracle and/or its affiliates.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License, version 2.0,
// as published by the Free Software Foundation.
//
// This program is also distributed with certain software (including
// but not limited to OpenSSL) that is licensed under separate terms,
// as designated in a particular file or component or in included license
// documentation.  The authors of MySQL hereby grant you an additional
// permission to link the program and your derivative works with the
// separately licensed software that they have included with MySQL.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License, version 2.0, for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: mysqlx_resultset.proto

// ifdef PROTOBUF_LITE: option optimize_for = LITE_RUNTIME;

//*
//@namespace Mysqlx::Resultset
//@brief Resultsets
//
//Executing a statement against the server may result in zero or more
//Resultsets followed by zero or one Resultset of the ``OUT`` parameters.
//
//A Resultset consists of:
//
//- one or more @ref Mysqlx::Resultset::ColumnMetaData
//- zero or more @ref Mysqlx::Resultset::Row
//
//It is followed by:
//
//- a @ref Mysqlx::Resultset::FetchDoneMoreResultsets if more
//resultsets are following
//- a @ref Mysqlx::Resultset::FetchDoneMoreOutParams if more
//Resultset of ``OUT`` parameters is following
//- a @ref Mysqlx::Resultset::FetchDone if the last resultset
//was sent
//
//@startuml
//...
//loop has more resultsets or not at end of fetch
//group resultset
//loop has more columns
//server --> client: ColumnMetaData
//end
//loop has more rows
//server --> client: Row
//end
//end
//alt has more resultsets
//server --> client: FetchDoneMoreResultsets
//end
//end
//loop has more OUT-paramsets or not at end of fetch
//server --> client: FetchDoneMoreOutParams
//group resultset
//loop has more columns
//server --> client: ColumnMetaData
//end
//loop has more rows
//server --> client: Row
//end
//end
//end
//alt at end of all resultsets
//server --> client: FetchDone
//else cursor is opened
//server --> client: FetchSuspended
//end
//...
//@enduml
//
//@par Examples:
//
//@par No Resultset
//
//A ``INSERT`` statement usually doesn't send any resultset which
//results in only a ``FetchDone``.
//
//@startuml
//server --> client: FetchDone
//@enduml
//
//@par Empty Resultset
//
//``SELECT 1 LIMIT 0`` results in a empty resultset:
//
//@startuml
//server --> client: ColumnMetaData(.name = "1", .type = INT)
//server --> client: FetchDone
//@enduml
//
//@par Multi Resultset
//
//``CALL`` may result in multiple resultsets.
//
//@startuml
//server --> client: ColumnMetaData(.name = "1", .type = INT)
//server --> client: Row
//server --> client: FetchDoneMoreResultsets
//server --> client: ColumnMetaData(.name = "1", .type = INT)
//server --> client: Row
//server --> client: FetchDone
//@enduml
//
//@par OUT params
//
//``CALL`` may result OUT parameters only
//
//@startuml
//server --> client: FetchDoneMoreOutParams
//server --> client: ColumnMetaData(.name = "1", .type = INT)
//server --> client: Row
//server --> client: FetchDone
//@enduml

package mysqlxresultset

import (
	_ "github.com/golistic/pxmysql/internal/mysqlx/mysqlx"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// A hint about the higher-level encoding of a BYTES field
//
// |type  | value  | description             |
// |------| -------|-------------------------|
// |BYTES | 0x0001 | GEOMETRY (WKB encoding) |
// |BYTES | 0x0002 | JSON (text encoding)    |
// |BYTES | 0x0003 | XML (text encoding)     |
//
// @note
// this list isn't comprehensive. As a guideline: the field's value is expected
// to pass a validator check on client and server if this field is set.
// If the server adds more internal datatypes that rely on BLOB storage
// like image manipulation, seeking into complex types in BLOBs, ... more
// types will be added.
type ContentType_BYTES int32

const (
	ContentType_BYTES_GEOMETRY ContentType_BYTES = 1
	ContentType_BYTES_JSON     ContentType_BYTES = 2
	ContentType_BYTES_XML      ContentType_BYTES = 3
)

// Enum value maps for ContentType_BYTES.
var (
	ContentType_BYTES_name = map[int32]string{
		1: "GEOMETRY",
		2: "JSON",
		3: "XML",
	}
	ContentType_BYTES_value = map[string]int32{
		"GEOMETRY": 1,
		"JSON":     2,
		"XML":      3,
	}
)

func (x ContentType_BYTES) Enum() *ContentType_BYTES {
	p := new(ContentType_BYTES)
	*p = x
	return p
}

func (x ContentType_BYTES) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType_BYTES) Descriptor() protoreflect.EnumDescriptor {
	return file_mysqlx_resultset_proto_enumTypes[0].Descriptor()
}

func (ContentType_BYTES) Type() protoreflect.EnumType {
	return &file_mysqlx_resultset_proto_enumTypes[0]
}

func (x ContentType_BYTES) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContentType_BYTES) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContentType_BYTES(num)
	return nil
}

// Deprecated: Use ContentType_BYTES.Descriptor instead.
func (ContentType_BYTES) EnumDescriptor() ([]byte, []int) {
	return file_mysqlx_resultset_proto_rawDescGZIP(), []int{0}
}

// *
// A hint about the higher-level encoding of a DATETIME field
//
// |type     |value  |description                                |
// |---------|-------|-------------------------------------------|
// |DATE     |0x0001 |DATETIME contains only date part           |
// |DATETIME |0x0002 |DATETIME contains both date and time parts |
type ContentType_DATETIME int32

const (
	ContentType_DATETIME_DATE     ContentType_DATETIME = 1
	ContentType_DATETIME_DATETIME ContentType_DATETIME = 2
)

// Enum value maps for ContentType_DATETIME.
var (
	ContentType_DATETIME_name = map[int32]string{
		1: "DATE",
		2: "DATETIME",
	}
	ContentType_DATETIME_value = map[string]int32{
		"DATE":     1,
		"DATETIME": 2,
	}
)

func (x ContentType_DATETIME) Enum() *ContentType_DATETIME {
	p := new(ContentType_DATETIME)
	*p = x
	return p
}

func (x ContentType_DATETIME) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType_DATETIME) Descriptor() protoreflect.EnumDescriptor {
	return file_mysqlx_resultset_proto_enumTypes[1].Descriptor()
}

func (ContentType_DATETIME) Type() protoreflect.EnumType {
	return &file_mysqlx_resultset_proto_enumTypes[1]
}

func (x ContentType_DATETIME) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContentType_DATETIME) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContentType_DATETIME(num)
	return nil
}

// Deprecated: Use ContentType_DATETIME.Descriptor instead.
func (ContentType_DATETIME) EnumDescriptor() ([]byte, []int) {
	return file_mysqlx_resultset_proto_rawDescGZIP(), []int{1}
}

type ColumnMetaData_FieldType int32

const (
	ColumnMetaData_SINT     ColumnMetaData_FieldType = 1
	ColumnMetaData_UINT     ColumnMetaData_FieldType = 2
	ColumnMetaData_DOUBLE   ColumnMetaData_FieldType = 5
	ColumnMetaData_FLOAT    ColumnMetaData_FieldType = 6
	ColumnMetaData_BYTES    ColumnMetaData_FieldType = 7
	ColumnMetaData_TIME     ColumnMetaData_FieldType = 10
	ColumnMetaData_DATETIME ColumnMetaData_FieldType = 12
	ColumnMetaData_SET      ColumnMetaData_FieldType = 15
	ColumnMetaData_ENUM     ColumnMetaData_FieldType = 16
	ColumnMetaData_BIT      ColumnMetaData_FieldType = 17
	ColumnMetaData_DECIMAL  ColumnMetaData_FieldType = 18
)

// Enum value maps for ColumnMetaData_FieldType.
var (
	ColumnMetaData_FieldType_name = map[int32]string{
		1:  "SINT",
		2:  "UINT",
		5:  "DOUBLE",
		6:  "FLOAT",
		7:  "BYTES",
		10: "TIME",
		12: "DATETIME",
		15: "SET",
		16: "ENUM",
		17: "BIT",
		18: "DECIMAL",
	}
	ColumnMetaData_FieldType_value = map[string]int32{
		"SINT":     1,
		"UINT":     2,
		"DOUBLE":   5,
		"FLOAT":    6,
		"BYTES":    7,
		"TIME":     10,
		"DATETIME": 12,
		"SET":      15,
		"ENUM":     16,
		"BIT":      17,
		"DECIMAL":  18,
	}
)

func (x ColumnMetaData_FieldType) Enum() *ColumnMetaData_FieldType {
	p := new(ColumnMetaData_FieldType)
	*p = x
	return p
}

func (x ColumnMetaData_FieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnMetaData_FieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_mysqlx_resultset_proto_enumTypes[2].Descriptor()
}

func (ColumnMetaData_FieldType) Type() protoreflect.EnumType {
	return &file_mysqlx_resultset_proto_enumTypes[2]
}

func (x ColumnMetaData_FieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ColumnMetaData_FieldType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ColumnMetaData_FieldType(num)
	return nil
}

// Deprecated: Use ColumnMetaData_FieldType.Descriptor instead.
func (ColumnMetaData_FieldType) EnumDescriptor() ([]byte, []int) {
	return file_mysqlx_resultset_proto_rawDescGZIP(), []int{4, 0}
}

// *
// Resultsets are finished, OUT paramset is next:
type FetchDoneMoreOutParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FetchDoneMoreOutParams) Reset() {
	*x = FetchDoneMoreOutParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_resultset_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDoneMoreOutParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDoneMoreOutParams) ProtoMessage() {}

func (x *FetchDoneMoreOutParams) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_resultset_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDoneMoreOutParams.ProtoReflect.Descriptor instead.
func (*FetchDoneMoreOutParams) Descriptor() ([]byte, []int) {
	return file_mysqlx_resultset_proto_rawDescGZIP(), []int{0}
}

// *
// Resultset and out-params are finished, but more resultsets available
type FetchDoneMoreResultsets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FetchDoneMoreResultsets) Reset() {
	*x = FetchDoneMoreResultsets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_resultset_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDoneMoreResultsets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDoneMoreResultsets) ProtoMessage() {}

func (x *FetchDoneMoreResultsets) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_resultset_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDoneMoreResultsets.ProtoReflect.Descriptor instead.
func (*FetchDoneMoreResultsets) Descriptor() ([]byte, []int) {
	return file_mysqlx_resultset_proto_rawDescGZIP(), []int{1}
}

// *
// All resultsets are finished
type FetchDone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FetchDone) Reset() {
	*x = FetchDone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_resultset_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDone) ProtoMessage() {}

func (x *FetchDone) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_resultset_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDone.ProtoReflect.Descriptor instead.
func (*FetchDone) Descriptor() ([]byte, []int) {
	return file_mysqlx_resultset_proto_rawDescGZIP(), []int{2}
}

// *
// Cursor is opened; still, the execution of PrepFetch or PrepExecute ended
type FetchSuspended struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FetchSuspended) Reset() {
	*x = FetchSuspended{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_resultset_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchSuspended) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchSuspended) ProtoMessage() {}

func (x *FetchSuspended) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_resultset_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchSuspended.ProtoReflect.Descriptor instead.
func (*FetchSuspended) Descriptor() ([]byte, []int) {
	return file_mysqlx_resultset_proto_rawDescGZIP(), []int{3}
}

// *
// Meta data of a column
//
// @note
// The encoding used for the different “bytes“ fields in the
// meta data is externally controlled. See also:
// https://dev.mysql.com/doc/refman/5.0/en/charset-connection.html
//
// @par
// @note
// The server may not set the “original_{table|name}“ fields
// if they are equal to the plain “{table|name}“ field.
//
// @par
// @note
// A client has to reconstruct it like:
// @code{py}
// if .original_name is empty and .name is not empty:
// .original_name = .name
//
// if .original_table is empty and .table is not empty:
// .original_table = .table
// @endcode
//
// @par
// @note
// “Compact metadata format“ can be requested by the client.
// In that case, only “.type“ is set and all other fields are  empty.
//
// Expected data type of Mysqlx.Resultset.Row per SQL Type for
// non-NULL values:
//
// | SQL Type          | .type     | .length | .frac\_dig | .flags | .charset |
// |-------------------|-----------|---------|------------|--------|----------|
// | TINY              | SINT      | x       |            |        |          |
// | TINY UNSIGNED     | UINT      | x       |            | x      |          |
// | SHORT             | SINT      | x       |            |        |          |
// | SHORT UNSIGNED    | UINT      | x       |            | x      |          |
// | INT24             | SINT      | x       |            |        |          |
// | INT24 UNSIGNED    | UINT      | x       |            | x      |          |
// | INT               | SINT      | x       |            |        |          |
// | INT UNSIGNED      | UINT      | x       |            | x      |          |
// | LONGLONG          | SINT      | x       |            |        |          |
// | LONGLONG UNSIGNED | UINT      | x       |            | x      |          |
// | DOUBLE            | DOUBLE    | x       | x          | x      |          |
// | FLOAT             | FLOAT     | x       | x          | x      |          |
// | DECIMAL           | DECIMAL   | x       | x          | x      |          |
// | VARCHAR,CHAR,...  | BYTES     | x       |            | x      | x        |
// | GEOMETRY          | BYTES     |         |            |        |          |
// | TIME              | TIME      | x       |            |        |          |
// | DATE              | DATETIME  | x       |            |        |          |
// | DATETIME          | DATETIME  | x       |            |        |          |
// | YEAR              | UINT      | x       |            | x      |          |
// | TIMESTAMP         | DATETIME  | x       |            |        |          |
// | SET               | SET       |         |            |        | x        |
// | ENUM              | ENUM      |         |            |        | x        |
// | NULL              | BYTES     |         |            |        |          |
// | BIT               | BIT       | x       |            |        |          |
//
// @note
// The SQL "NULL" value is sent as an empty field value in
// @ref Mysqlx::Resultset::Row.
//
// @par Tip
// The protobuf encoding of primitive data types is described in
// https://developers.google.com/protocol-buffers/docs/encoding
//
// + SINT
//
// - “.length“ @n
// Maximum number of displayable decimal digits (including
// minus sign) of the type.
// @note
// The valid range is 0-255, but usually you'll see 1-20.
//
// | SQL Type         | Maximum Digits per Type |
// |------------------|-------------------------|
// | TINY SIGNED      | 4                       |
// | SHORT SIGNED     | 6                       |
// | INT24 SIGNED     | 8                       |
// | INT SIGNED       | 11                      |
// | LONGLONG SIGNED  | 20                      |
//
// @par Tip
// Definition of “M“ are in
// https://dev.mysql.com/doc/refman/5.5/en/numeric-type-overview.html.
//
// - “value“@n
// Variable length encoded signed 64 integer.
//
// + UINT
//
// - “.flags & 1“ (zerofill) @n
// The client has to left pad with 0's up to .length.
//
// - “.length“ @n
// Maximum number of displayable decimal digits of the
// type.
// @note
// The valid range is 0-255, but usually you'll see
// 1-20.
//
// | SQL Type             | max digits per type |
// |----------------------|---------------------|
// | TINY UNSIGNED        | 3                   |
// | SHORT UNSIGNED       | 5                   |
// | INT24 UNSIGNED       | 8                   |
// | INT UNSIGNED         | 10                  |
// | LONGLONG UNSIGNED    | 20                  |
//
// @par Tip
// Definition of “M“ are in
// https://dev.mysql.com/doc/refman/5.5/en/numeric-type-overview.html.
//
// - “value“ @n
// Variable length encoded unsigned 64 integer.
//
// + BIT
//
// - “.length“ @n
// Maximum number of displayable binary digits.
// @note
// The valid range for M of the “BIT“ type is 1 - 64.
//
// @par Tip
// https://dev.mysql.com/doc/refman/5.5/en/numeric-type-overview.html
//
// - “value“ @n
// Variable length encoded unsigned 64 integer.
//
// + DOUBLE
//
// - “.length“ @n
// Maximum number of displayable decimal digits (including
// the decimal point and “.fractional_digits“).
//
// - “.fractional_digits“ @n
// Maximum number of displayable decimal digits following
// the decimal point.
//
// - “value“@n
// Encoded as protobuf's 'double'.
//
// + FLOAT
//
// - “.length“@n
// Maximum number of displayable decimal digits (including
// the decimal point and “.fractional_digits“).
//
// - “.fractional_digits“@n
// Maximum number of displayable decimal digits following
// the decimal point.
//
// - “value“@n
// Encoded as protobuf's 'float'.
//
// + BYTES, ENUM
// @note
// BYTES is used for all opaque byte strings that may have a charset:
// -  TINYBLOB, BLOB, MEDIUMBLOB, LONGBLOB
// -  TINYTEXT, TEXT, MEDIUMTEXT, LONGTEXT
// -  VARCHAR, VARBINARY
// -  CHAR, BINARY
// -  ENUM
//
// - “.length“@n
// Maximum length of characters of the underlying type.
//
// - “.flags & 1“ (rightpad) @n
// If the length of the field is less than “.length“, the
// receiver is supposed to add padding characters to the
// right end of the string. If the “.charset“ is
// "binary", the padding character is “0x00“, otherwise
// it is a space character as defined by that character
// set.
// | SQL Type      | .length  | .charset  | .flags   |
// |---------------|----------|-----------|----------|
// | TINYBLOB      | 256      | binary    |          |
// | BLOB          | 65535    | binary    |          |
// | VARCHAR(32)   | 32       | utf8      |          |
// | VARBINARY(32) | 32       | utf8\_bin |          |
// | BINARY(32)    | 32       | binary    | rightpad |
// | CHAR(32)      | 32       | utf8      | rightpad |
//
// - “value“
// Sequence of bytes with added one extra “0x00“ byte at
// the end. To obtain the original string, the extra
// “0x00“ should be removed. The length of the string can
// be acquired with protobuf's field “length()“ method:
//
// “length of sequence-of-bytes = length-of-field - 1“
// @note
// The extra byte allows to distinguish between a NULL
// and empty byte sequence.
//
// + TIME
//
// A time value.
//
// - “value“@n
// The following bytes sequence:
//
// “negate [ hour [ minutes [ seconds [ useconds ]]]]“
//
// -  negate - one byte, should be one of: 0x00 for "+",
// 0x01 for "-"
//
// -  hour - optional variable length encoded unsigned64
// value for the hour
//
// -  minutes - optional variable length encoded unsigned64
// value for the minutes
//
// -  seconds - optional variable length encoded unsigned64
// value for the seconds
//
// -  useconds - optional variable length encoded
// unsigned64 value for the microseconds
//
// @par Tip
// The protobuf encoding in
// https://developers.google.com/protocol-buffers/docs/encoding.
//
// @note
// Hour, minutes, seconds, and useconds are optional if
// all the values to the right are 0.
//
// Example: “0x00 -> +00:00:00.000000“
//
// + DATETIME
//
// A date or date and time value.
//
// - “value“ @n
// A sequence of variants, arranged as follows:
//
// “| year | month | day | [ | hour | [ | minutes | [ | seconds | [ | useconds | ]]]]“
//
// -  year - variable length encoded unsigned64 value for
// the year
//
// -  month - variable length encoded unsigned64 value for
// the month
//
// -  day - variable length encoded unsigned64 value for
// the day
//
// -  hour - optional variable length encoded unsigned64
// value for the hour
//
// -  minutes - optional variable length encoded unsigned64
// value for the minutes
//
// -  seconds - optional variable length encoded unsigned64
// value for the seconds
//
// -  useconds - optional variable length encoded
// unsigned64 value for the microseconds
// @note
// Hour, minutes, seconds, useconds are optional if all
// the values to the right are 0.
//
// - “.flags“@n
// | Name          | Position |
// |---------------|----------|
// | is\_timestamp | 1        |
//
// + DECIMAL
//
// An arbitrary length number. The number is encoded as a
// single byte indicating the position of the decimal point
// followed by the Packed BCD encoded number. Packed BCD is
// used to simplify conversion to and from strings and other
// native arbitrary precision math data types. See also: packed
// BCD in https://en.wikipedia.org/wiki/Binary-coded_decimal
//
// - “.length“
// Maximum number of displayable decimal digits
// (*excluding* the decimal point and sign, but including
// “.fractional_digits“).
// @note
// Should be in the range of 1 - 65.
//
// - “.fractional_digits“
// The decimal digits to display out of length.
// @note
// Should be in the range of 0 - 30.
//
// “value“
// The following bytes sequence:
//
// “scale | BCD+ sign [0x00]?“
//
// -  scale - 8bit scale value (number of decimal digit after the '.')
//
// -  BCD - BCD encoded digits (4 bits for each digit)
//
// -  sign - sign encoded on 4 bits (0xc = "+", 0xd = "-")
//
// -  0x0 - last 4bits if length(digits) % 2 == 0
//
// Example: “x04 0x12 0x34 0x01
// 0xd0 -> -12.3401“
//
// + SET
//
// A list of strings representing a SET of values.
//
// - “value“@n
// A sequence of 0 or more of protobuf's bytes (length
// prepended octets) or one of the special sequences with a
// predefined meaning listed below.
//
// Example (length of the bytes array shown in brackets):
// -  “[0]“ - the NULL value
//
// -  “[1] 0x00“ - a set containing a blank string ”
//
// -  “[1] 0x01“ - this would be an invalid value,
// but is to be treated as the empty set
//
// -  “[2] 0x01 0x00“ - a set with a single item, which is the '0'
// character
//
// -  “[8] 0x03 F O O 0x03 B A R“ - a set with 2 items: FOO,BAR
type ColumnMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * datatype of the field in a row
	Type *ColumnMetaData_FieldType `protobuf:"varint,1,req,name=type,enum=Mysqlx.Resultset.ColumnMetaData_FieldType" json:"type,omitempty"`
	// * name of the column
	Name []byte `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// * name of the column before an alias was applied
	OriginalName []byte `protobuf:"bytes,3,opt,name=original_name,json=originalName" json:"original_name,omitempty"`
	// * name of the table the column originates from
	Table []byte `protobuf:"bytes,4,opt,name=table" json:"table,omitempty"`
	// * name of the table the column originates from before an alias was applied
	OriginalTable []byte `protobuf:"bytes,5,opt,name=original_table,json=originalTable" json:"original_table,omitempty"`
	// * schema the column originates from
	Schema []byte `protobuf:"bytes,6,opt,name=schema" json:"schema,omitempty"`
	// * catalog the schema originates from
	// @note
	// As there is currently no support for catalogs in MySQL,
	// don't expect this field to be set. In the MySQL C/S
	// protocol the field had the value “def“ all the time
	Catalog   []byte  `protobuf:"bytes,7,opt,name=catalog" json:"catalog,omitempty"`
	Collation *uint64 `protobuf:"varint,8,opt,name=collation" json:"collation,omitempty"`
	// * displayed factional decimal digits for floating point and
	// fixed point numbers
	FractionalDigits *uint32 `protobuf:"varint,9,opt,name=fractional_digits,json=fractionalDigits" json:"fractional_digits,omitempty"`
	// * maximum count of displayable characters of .type
	Length *uint32 `protobuf:"varint,10,opt,name=length" json:"length,omitempty"`
	// * “.type“ specific flags
	// | Type    | Value  | Description  |
	// |---------|--------|--------------|
	// | UINT    | 0x0001 | zerofill     |
	// | DOUBLE  | 0x0001 | unsigned     |
	// | FLOAT   | 0x0001 | unsigned     |
	// | DECIMAL | 0x0001 | unsigned     |
	// | BYTES   | 0x0001 | rightpad     |
	//
	// | Value  | Description     |
	// |--------|-----------------|
	// | 0x0010 | NOT\_NULL       |
	// | 0x0020 | PRIMARY\_KEY    |
	// | 0x0040 | UNIQUE\_KEY     |
	// | 0x0080 | MULTIPLE\_KEY   |
	// | 0x0100 | AUTO\_INCREMENT |
	//
	// default: 0
	Flags *uint32 `protobuf:"varint,11,opt,name=flags" json:"flags,omitempty"`
	// * a hint about the higher-level encoding of a BYTES field
	// | Type   | Value  | Description             |
	// |--------|--------|-------------------------|
	// | BYTES  | 0x0001 | GEOMETRY (WKB encoding) |
	// | BYTES  | 0x0002 | JSON (text encoding)    |
	// | BYTES  | 0x0003 | XML (text encoding)     |
	// @note
	// This list isn't comprehensive. As a guideline: the field's
	// value is expected to pass a validator check on client
	// and server if this field is set. If the server adds more
	// internal data types that rely on BLOB storage like image
	// manipulation, seeking into complex types in BLOBs, and
	// more types will be added
	ContentType *uint32 `protobuf:"varint,12,opt,name=content_type,json=contentType" json:"content_type,omitempty"`
}

func (x *ColumnMetaData) Reset() {
	*x = ColumnMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_resultset_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnMetaData) ProtoMessage() {}

func (x *ColumnMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_resultset_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnMetaData.ProtoReflect.Descriptor instead.
func (*ColumnMetaData) Descriptor() ([]byte, []int) {
	return file_mysqlx_resultset_proto_rawDescGZIP(), []int{4}
}

func (x *ColumnMetaData) GetType() ColumnMetaData_FieldType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ColumnMetaData_SINT
}

func (x *ColumnMetaData) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ColumnMetaData) GetOriginalName() []byte {
	if x != nil {
		return x.OriginalName
	}
	return nil
}

func (x *ColumnMetaData) GetTable() []byte {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *ColumnMetaData) GetOriginalTable() []byte {
	if x != nil {
		return x.OriginalTable
	}
	return nil
}

func (x *ColumnMetaData) GetSchema() []byte {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ColumnMetaData) GetCatalog() []byte {
	if x != nil {
		return x.Catalog
	}
	return nil
}

func (x *ColumnMetaData) GetCollation() uint64 {
	if x != nil && x.Collation != nil {
		return *x.Collation
	}
	return 0
}

func (x *ColumnMetaData) GetFractionalDigits() uint32 {
	if x != nil && x.FractionalDigits != nil {
		return *x.FractionalDigits
	}
	return 0
}

func (x *ColumnMetaData) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *ColumnMetaData) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *ColumnMetaData) GetContentType() uint32 {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return 0
}

// *
// Row in a Resultset.
//
// A row is represented as a list of fields encoded as byte blobs.
// Value of each field is encoded as sequence of bytes using
// encoding appropriate for the type of the value given by
// “ColumnMetadata“, as specified in the @ref Mysqlx::Resultset::ColumnMetaData
// description.
type Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field [][]byte `protobuf:"bytes,1,rep,name=field" json:"field,omitempty"`
}

func (x *Row) Reset() {
	*x = Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_resultset_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_resultset_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_mysqlx_resultset_proto_rawDescGZIP(), []int{5}
}

func (x *Row) GetField() [][]byte {
	if x != nil {
		return x.Field
	}
	return nil
}

var File_mysqlx_resultset_proto protoreflect.FileDescriptor

var file_mysqlx_resultset_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x65, 0x74, 0x1a, 0x0c, 0x6d, 0x79, 0x73, 0x71,
	0x6c, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1e, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x44, 0x6f, 0x6e, 0x65, 0x4d, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x3a, 0x04, 0x90, 0xea, 0x30, 0x12, 0x22, 0x1f, 0x0a, 0x17, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x44, 0x6f, 0x6e, 0x65, 0x4d, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x65, 0x74, 0x73, 0x3a, 0x04, 0x90, 0xea, 0x30, 0x10, 0x22, 0x11, 0x0a, 0x09, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x44, 0x6f, 0x6e, 0x65, 0x3a, 0x04, 0x90, 0xea, 0x30, 0x0e, 0x22, 0x16, 0x0a, 0x0e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x3a, 0x04,
	0x90, 0xea, 0x30, 0x0f, 0x22, 0x9f, 0x04, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x11, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x09,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x49, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f,
	0x41, 0x54, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x07, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41, 0x54,
	0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x45, 0x54, 0x10, 0x0f,
	0x12, 0x08, 0x0a, 0x04, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x10, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x49,
	0x54, 0x10, 0x11, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x12,
	0x3a, 0x04, 0x90, 0xea, 0x30, 0x0c, 0x22, 0x21, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x3a, 0x04, 0x90, 0xea, 0x30, 0x0d, 0x2a, 0x34, 0x0a, 0x11, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x12, 0x0c,
	0x0a, 0x08, 0x47, 0x45, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x4d, 0x4c, 0x10, 0x03, 0x2a,
	0x2e, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x42,
	0x19, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x63, 0x6a, 0x2e,
	0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
}

var (
	file_mysqlx_resultset_proto_rawDescOnce sync.Once
	file_mysqlx_resultset_proto_rawDescData = file_mysqlx_resultset_proto_rawDesc
)

func file_mysqlx_resultset_proto_rawDescGZIP() []byte {
	file_mysqlx_resultset_proto_rawDescOnce.Do(func() {
		file_mysqlx_resultset_proto_rawDescData = protoimpl.X.CompressGZIP(file_mysqlx_resultset_proto_rawDescData)
	})
	return file_mysqlx_resultset_proto_rawDescData
}

var file_mysqlx_resultset_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_mysqlx_resultset_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_mysqlx_resultset_proto_goTypes = []interface{}{
	(ContentType_BYTES)(0),          // 0: Mysqlx.Resultset.ContentType_BYTES
	(ContentType_DATETIME)(0),       // 1: Mysqlx.Resultset.ContentType_DATETIME
	(ColumnMetaData_FieldType)(0),   // 2: Mysqlx.Resultset.ColumnMetaData.FieldType
	(*FetchDoneMoreOutParams)(nil),  // 3: Mysqlx.Resultset.FetchDoneMoreOutParams
	(*FetchDoneMoreResultsets)(nil), // 4: Mysqlx.Resultset.FetchDoneMoreResultsets
	(*FetchDone)(nil),               // 5: Mysqlx.Resultset.FetchDone
	(*FetchSuspended)(nil),          // 6: Mysqlx.Resultset.FetchSuspended
	(*ColumnMetaData)(nil),          // 7: Mysqlx.Resultset.ColumnMetaData
	(*Row)(nil),                     // 8: Mysqlx.Resultset.Row
}
var file_mysqlx_resultset_proto_depIdxs = []int32{
	2, // 0: Mysqlx.Resultset.ColumnMetaData.type:type_name -> Mysqlx.Resultset.ColumnMetaData.FieldType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_mysqlx_resultset_proto_init() }
func file_mysqlx_resultset_proto_init() {
	if File_mysqlx_resultset_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mysqlx_resultset_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDoneMoreOutParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_resultset_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDoneMoreResultsets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_resultset_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_resultset_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchSuspended); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_resultset_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_resultset_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mysqlx_resultset_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mysqlx_resultset_proto_goTypes,
		DependencyIndexes: file_mysqlx_resultset_proto_depIdxs,
		EnumInfos:         file_mysqlx_resultset_proto_enumTypes,
		MessageInfos:      file_mysqlx_resultset_proto_msgTypes,
	}.Build()
	File_mysqlx_resultset_proto = out.File
	file_mysqlx_resultset_proto_rawDesc = nil
	file_mysqlx_resultset_proto_goTypes = nil
	file_mysqlx_resultset_proto_depIdxs = nil
}
