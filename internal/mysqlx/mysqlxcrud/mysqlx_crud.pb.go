//
// Copyright (c) 2015, 2021, Oracle and/or its affiliates.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License, version 2.0,
// as published by the Free Software Foundation.
//
// This program is also distributed with certain software (including
// but not limited to OpenSSL) that is licensed under separate terms,
// as designated in a particular file or component or in included license
// documentation.  The authors of MySQL hereby grant you an additional
// permission to link the program and your derivative works with the
// separately licensed software that they have included with MySQL.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License, version 2.0, for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.11
// source: mysqlx_crud.proto

// ifdef PROTOBUF_LITE: option optimize_for = LITE_RUNTIME;

//*
//@namespace Mysqlx::Crud
//@brief Basic CRUD operations
//
//The CRUD operations work in a similar fashion as the SQL statements below:
//- @ref Mysqlx::Crud::Insert - ``INSERT INTO ...``
//- @ref Mysqlx::Crud::Find - ``SELECT ... FROM ...``
//- @ref Mysqlx::Crud::Update - ``UPDATE ... SET ...``
//- @ref Mysqlx::Crud::Delete - ``DELETE FROM ...``
//
//Also operation related to manipulation of views:
//- @ref Mysqlx::Crud::CreateView - ``CREATE VIEW ... AS ...``
//- @ref Mysqlx::Crud::ModifyView - ``ALTER VIEW ... AS ...``
//- @ref Mysqlx::Crud::DropView - ``DROP VIEW ...``

package mysqlxcrud

import (
	_ "github.com/golistic/pxmysql/internal/mysqlx/mysqlx"
	mysqlxdatatypes "github.com/golistic/pxmysql/internal/mysqlx/mysqlxdatatypes"
	mysqlxexpr "github.com/golistic/pxmysql/internal/mysqlx/mysqlxexpr"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// DataModel to use for filters, names, ...
type DataModel int32

const (
	DataModel_DOCUMENT DataModel = 1
	DataModel_TABLE    DataModel = 2
)

// Enum value maps for DataModel.
var (
	DataModel_name = map[int32]string{
		1: "DOCUMENT",
		2: "TABLE",
	}
	DataModel_value = map[string]int32{
		"DOCUMENT": 1,
		"TABLE":    2,
	}
)

func (x DataModel) Enum() *DataModel {
	p := new(DataModel)
	*p = x
	return p
}

func (x DataModel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataModel) Descriptor() protoreflect.EnumDescriptor {
	return file_mysqlx_crud_proto_enumTypes[0].Descriptor()
}

func (DataModel) Type() protoreflect.EnumType {
	return &file_mysqlx_crud_proto_enumTypes[0]
}

func (x DataModel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DataModel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DataModel(num)
	return nil
}

// Deprecated: Use DataModel.Descriptor instead.
func (DataModel) EnumDescriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{0}
}

// *
// ViewAlgorithm defines how MySQL Server processes the view
type ViewAlgorithm int32

const (
	// * MySQL chooses which algorithm to use
	ViewAlgorithm_UNDEFINED ViewAlgorithm = 1
	// * the text of a statement that refers to the view and the view
	// definition are merged
	ViewAlgorithm_MERGE ViewAlgorithm = 2
	// * the view are retrieved into a temporary table
	ViewAlgorithm_TEMPTABLE ViewAlgorithm = 3
)

// Enum value maps for ViewAlgorithm.
var (
	ViewAlgorithm_name = map[int32]string{
		1: "UNDEFINED",
		2: "MERGE",
		3: "TEMPTABLE",
	}
	ViewAlgorithm_value = map[string]int32{
		"UNDEFINED": 1,
		"MERGE":     2,
		"TEMPTABLE": 3,
	}
)

func (x ViewAlgorithm) Enum() *ViewAlgorithm {
	p := new(ViewAlgorithm)
	*p = x
	return p
}

func (x ViewAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_mysqlx_crud_proto_enumTypes[1].Descriptor()
}

func (ViewAlgorithm) Type() protoreflect.EnumType {
	return &file_mysqlx_crud_proto_enumTypes[1]
}

func (x ViewAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ViewAlgorithm) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ViewAlgorithm(num)
	return nil
}

// Deprecated: Use ViewAlgorithm.Descriptor instead.
func (ViewAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{1}
}

// *
// ViewSqlSecurity defines the security context in which the view is going to be
// executed; this means that VIEW can be executed with current user permissions or
// with permissions of the user who defined the VIEW
type ViewSqlSecurity int32

const (
	// * use current user permissions
	ViewSqlSecurity_INVOKER ViewSqlSecurity = 1
	// * use permissions of the user who defined the VIEW
	ViewSqlSecurity_DEFINER ViewSqlSecurity = 2
)

// Enum value maps for ViewSqlSecurity.
var (
	ViewSqlSecurity_name = map[int32]string{
		1: "INVOKER",
		2: "DEFINER",
	}
	ViewSqlSecurity_value = map[string]int32{
		"INVOKER": 1,
		"DEFINER": 2,
	}
)

func (x ViewSqlSecurity) Enum() *ViewSqlSecurity {
	p := new(ViewSqlSecurity)
	*p = x
	return p
}

func (x ViewSqlSecurity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewSqlSecurity) Descriptor() protoreflect.EnumDescriptor {
	return file_mysqlx_crud_proto_enumTypes[2].Descriptor()
}

func (ViewSqlSecurity) Type() protoreflect.EnumType {
	return &file_mysqlx_crud_proto_enumTypes[2]
}

func (x ViewSqlSecurity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ViewSqlSecurity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ViewSqlSecurity(num)
	return nil
}

// Deprecated: Use ViewSqlSecurity.Descriptor instead.
func (ViewSqlSecurity) EnumDescriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{2}
}

// *
// ViewCheckOption limits the write operations done on a `VIEW`
// (`INSERT`, `UPDATE`, `DELETE`) to rows in which the `WHERE` clause is `TRUE`
type ViewCheckOption int32

const (
	// * the view WHERE clause is checked, but no underlying views are checked
	ViewCheckOption_LOCAL ViewCheckOption = 1
	// * the view WHERE clause is checked, then checking recurses
	// to underlying views
	ViewCheckOption_CASCADED ViewCheckOption = 2
)

// Enum value maps for ViewCheckOption.
var (
	ViewCheckOption_name = map[int32]string{
		1: "LOCAL",
		2: "CASCADED",
	}
	ViewCheckOption_value = map[string]int32{
		"LOCAL":    1,
		"CASCADED": 2,
	}
)

func (x ViewCheckOption) Enum() *ViewCheckOption {
	p := new(ViewCheckOption)
	*p = x
	return p
}

func (x ViewCheckOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewCheckOption) Descriptor() protoreflect.EnumDescriptor {
	return file_mysqlx_crud_proto_enumTypes[3].Descriptor()
}

func (ViewCheckOption) Type() protoreflect.EnumType {
	return &file_mysqlx_crud_proto_enumTypes[3]
}

func (x ViewCheckOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ViewCheckOption) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ViewCheckOption(num)
	return nil
}

// Deprecated: Use ViewCheckOption.Descriptor instead.
func (ViewCheckOption) EnumDescriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{3}
}

type Order_Direction int32

const (
	Order_ASC  Order_Direction = 1
	Order_DESC Order_Direction = 2
)

// Enum value maps for Order_Direction.
var (
	Order_Direction_name = map[int32]string{
		1: "ASC",
		2: "DESC",
	}
	Order_Direction_value = map[string]int32{
		"ASC":  1,
		"DESC": 2,
	}
)

func (x Order_Direction) Enum() *Order_Direction {
	p := new(Order_Direction)
	*p = x
	return p
}

func (x Order_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_mysqlx_crud_proto_enumTypes[4].Descriptor()
}

func (Order_Direction) Type() protoreflect.EnumType {
	return &file_mysqlx_crud_proto_enumTypes[4]
}

func (x Order_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Order_Direction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Order_Direction(num)
	return nil
}

// Deprecated: Use Order_Direction.Descriptor instead.
func (Order_Direction) EnumDescriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{5, 0}
}

type UpdateOperation_UpdateType int32

const (
	// * only allowed for TABLE
	UpdateOperation_SET UpdateOperation_UpdateType = 1
	// * no value (removes the identified path from a object or array)
	UpdateOperation_ITEM_REMOVE UpdateOperation_UpdateType = 2
	// * sets the new value on the identified path
	UpdateOperation_ITEM_SET UpdateOperation_UpdateType = 3
	// * replaces a value if the path exists
	UpdateOperation_ITEM_REPLACE UpdateOperation_UpdateType = 4
	// * source and value must be documents
	UpdateOperation_ITEM_MERGE UpdateOperation_UpdateType = 5
	// * insert the value in the array at the index identified in the source path
	UpdateOperation_ARRAY_INSERT UpdateOperation_UpdateType = 6
	// * append the value on the array at the identified path
	UpdateOperation_ARRAY_APPEND UpdateOperation_UpdateType = 7
	// * merge JSON object value with the provided patch expression
	UpdateOperation_MERGE_PATCH UpdateOperation_UpdateType = 8
)

// Enum value maps for UpdateOperation_UpdateType.
var (
	UpdateOperation_UpdateType_name = map[int32]string{
		1: "SET",
		2: "ITEM_REMOVE",
		3: "ITEM_SET",
		4: "ITEM_REPLACE",
		5: "ITEM_MERGE",
		6: "ARRAY_INSERT",
		7: "ARRAY_APPEND",
		8: "MERGE_PATCH",
	}
	UpdateOperation_UpdateType_value = map[string]int32{
		"SET":          1,
		"ITEM_REMOVE":  2,
		"ITEM_SET":     3,
		"ITEM_REPLACE": 4,
		"ITEM_MERGE":   5,
		"ARRAY_INSERT": 6,
		"ARRAY_APPEND": 7,
		"MERGE_PATCH":  8,
	}
)

func (x UpdateOperation_UpdateType) Enum() *UpdateOperation_UpdateType {
	p := new(UpdateOperation_UpdateType)
	*p = x
	return p
}

func (x UpdateOperation_UpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateOperation_UpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_mysqlx_crud_proto_enumTypes[5].Descriptor()
}

func (UpdateOperation_UpdateType) Type() protoreflect.EnumType {
	return &file_mysqlx_crud_proto_enumTypes[5]
}

func (x UpdateOperation_UpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UpdateOperation_UpdateType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UpdateOperation_UpdateType(num)
	return nil
}

// Deprecated: Use UpdateOperation_UpdateType.Descriptor instead.
func (UpdateOperation_UpdateType) EnumDescriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{6, 0}
}

type Find_RowLock int32

const (
	// * Lock matching rows against updates
	Find_SHARED_LOCK Find_RowLock = 1
	// * Lock matching rows so no other transaction can read or write to it
	Find_EXCLUSIVE_LOCK Find_RowLock = 2
)

// Enum value maps for Find_RowLock.
var (
	Find_RowLock_name = map[int32]string{
		1: "SHARED_LOCK",
		2: "EXCLUSIVE_LOCK",
	}
	Find_RowLock_value = map[string]int32{
		"SHARED_LOCK":    1,
		"EXCLUSIVE_LOCK": 2,
	}
)

func (x Find_RowLock) Enum() *Find_RowLock {
	p := new(Find_RowLock)
	*p = x
	return p
}

func (x Find_RowLock) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Find_RowLock) Descriptor() protoreflect.EnumDescriptor {
	return file_mysqlx_crud_proto_enumTypes[6].Descriptor()
}

func (Find_RowLock) Type() protoreflect.EnumType {
	return &file_mysqlx_crud_proto_enumTypes[6]
}

func (x Find_RowLock) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Find_RowLock) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Find_RowLock(num)
	return nil
}

// Deprecated: Use Find_RowLock.Descriptor instead.
func (Find_RowLock) EnumDescriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{7, 0}
}

type Find_RowLockOptions int32

const (
	// * Do not wait to acquire row lock, fail with an error
	// if a requested row is locked
	Find_NOWAIT Find_RowLockOptions = 1
	// * Do not wait to acquire a row lock,
	// remove locked rows from the result set
	Find_SKIP_LOCKED Find_RowLockOptions = 2
)

// Enum value maps for Find_RowLockOptions.
var (
	Find_RowLockOptions_name = map[int32]string{
		1: "NOWAIT",
		2: "SKIP_LOCKED",
	}
	Find_RowLockOptions_value = map[string]int32{
		"NOWAIT":      1,
		"SKIP_LOCKED": 2,
	}
)

func (x Find_RowLockOptions) Enum() *Find_RowLockOptions {
	p := new(Find_RowLockOptions)
	*p = x
	return p
}

func (x Find_RowLockOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Find_RowLockOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_mysqlx_crud_proto_enumTypes[7].Descriptor()
}

func (Find_RowLockOptions) Type() protoreflect.EnumType {
	return &file_mysqlx_crud_proto_enumTypes[7]
}

func (x Find_RowLockOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Find_RowLockOptions) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Find_RowLockOptions(num)
	return nil
}

// Deprecated: Use Find_RowLockOptions.Descriptor instead.
func (Find_RowLockOptions) EnumDescriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{7, 1}
}

type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         *string                        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Alias        *string                        `protobuf:"bytes,2,opt,name=alias" json:"alias,omitempty"`
	DocumentPath []*mysqlxexpr.DocumentPathItem `protobuf:"bytes,3,rep,name=document_path,json=documentPath" json:"document_path,omitempty"`
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_crud_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_crud_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{0}
}

func (x *Column) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Column) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *Column) GetDocumentPath() []*mysqlxexpr.DocumentPathItem {
	if x != nil {
		return x.DocumentPath
	}
	return nil
}

type Projection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * the expression identifying an element from the source data,
	// which can include a column identifier or any expression
	Source *mysqlxexpr.Expr `protobuf:"bytes,1,req,name=source" json:"source,omitempty"`
	// * optional alias. Required for DOCUMENTs (clients may use
	// the source string as default)
	Alias *string `protobuf:"bytes,2,opt,name=alias" json:"alias,omitempty"`
}

func (x *Projection) Reset() {
	*x = Projection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_crud_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Projection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Projection) ProtoMessage() {}

func (x *Projection) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_crud_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Projection.ProtoReflect.Descriptor instead.
func (*Projection) Descriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{1}
}

func (x *Projection) GetSource() *mysqlxexpr.Expr {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Projection) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

type Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Schema *string `protobuf:"bytes,2,opt,name=schema" json:"schema,omitempty"`
}

func (x *Collection) Reset() {
	*x = Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_crud_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection) ProtoMessage() {}

func (x *Collection) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_crud_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection.ProtoReflect.Descriptor instead.
func (*Collection) Descriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{2}
}

func (x *Collection) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Collection) GetSchema() string {
	if x != nil && x.Schema != nil {
		return *x.Schema
	}
	return ""
}

type Limit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * maximum rows to filter
	RowCount *uint64 `protobuf:"varint,1,req,name=row_count,json=rowCount" json:"row_count,omitempty"`
	// * maximum rows to skip before applying the row_count
	Offset *uint64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
}

func (x *Limit) Reset() {
	*x = Limit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_crud_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Limit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Limit) ProtoMessage() {}

func (x *Limit) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_crud_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Limit.ProtoReflect.Descriptor instead.
func (*Limit) Descriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{3}
}

func (x *Limit) GetRowCount() uint64 {
	if x != nil && x.RowCount != nil {
		return *x.RowCount
	}
	return 0
}

func (x *Limit) GetOffset() uint64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

// *
// LimitExpr, in comparison to Limit, is able to specify that row_count and
// offset are placeholders.
// This message support expressions of following types Expr/literal/UINT,
// Expr/PLACEHOLDER.
type LimitExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * maximum rows to filter
	RowCount *mysqlxexpr.Expr `protobuf:"bytes,1,req,name=row_count,json=rowCount" json:"row_count,omitempty"`
	// * maximum rows to skip before applying the row_count
	Offset *mysqlxexpr.Expr `protobuf:"bytes,2,opt,name=offset" json:"offset,omitempty"`
}

func (x *LimitExpr) Reset() {
	*x = LimitExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_crud_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitExpr) ProtoMessage() {}

func (x *LimitExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_crud_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitExpr.ProtoReflect.Descriptor instead.
func (*LimitExpr) Descriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{4}
}

func (x *LimitExpr) GetRowCount() *mysqlxexpr.Expr {
	if x != nil {
		return x.RowCount
	}
	return nil
}

func (x *LimitExpr) GetOffset() *mysqlxexpr.Expr {
	if x != nil {
		return x.Offset
	}
	return nil
}

// *
// Sort order
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr      *mysqlxexpr.Expr `protobuf:"bytes,1,req,name=expr" json:"expr,omitempty"`
	Direction *Order_Direction `protobuf:"varint,2,opt,name=direction,enum=Mysqlx.Crud.Order_Direction,def=1" json:"direction,omitempty"`
}

// Default values for Order fields.
const (
	Default_Order_Direction = Order_ASC
)

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_crud_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_crud_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{5}
}

func (x *Order) GetExpr() *mysqlxexpr.Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *Order) GetDirection() Order_Direction {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return Default_Order_Direction
}

type UpdateOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * specification of the value to be updated
	// - if data_model is TABLE, a column name may be specified and also
	// a document path, if the column has type JSON
	// - if data_model is DOCUMENT, only document paths are allowed
	//
	// @note in both cases, schema and table must be not set
	Source *mysqlxexpr.ColumnIdentifier `protobuf:"bytes,1,req,name=source" json:"source,omitempty"`
	// * the type of operation to be performed
	Operation *UpdateOperation_UpdateType `protobuf:"varint,2,req,name=operation,enum=Mysqlx.Crud.UpdateOperation_UpdateType" json:"operation,omitempty"`
	// * an expression to be computed as the new value for the operation
	Value *mysqlxexpr.Expr `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (x *UpdateOperation) Reset() {
	*x = UpdateOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_crud_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOperation) ProtoMessage() {}

func (x *UpdateOperation) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_crud_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOperation.ProtoReflect.Descriptor instead.
func (*UpdateOperation) Descriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateOperation) GetSource() *mysqlxexpr.ColumnIdentifier {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *UpdateOperation) GetOperation() UpdateOperation_UpdateType {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return UpdateOperation_SET
}

func (x *UpdateOperation) GetValue() *mysqlxexpr.Expr {
	if x != nil {
		return x.Value
	}
	return nil
}

// *
// Find Documents/Rows in a Collection/Table
//
// @startuml
// client -> server: Find
// ... one or more Resultset ...
// @enduml
//
// @returns @ref Mysqlx::Resultset
type Find struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * collection in which to find
	Collection *Collection `protobuf:"bytes,2,req,name=collection" json:"collection,omitempty"`
	// * data model that the operations refer to
	DataModel *DataModel `protobuf:"varint,3,opt,name=data_model,json=dataModel,enum=Mysqlx.Crud.DataModel" json:"data_model,omitempty"`
	// * list of column projections that shall be returned
	Projection []*Projection `protobuf:"bytes,4,rep,name=projection" json:"projection,omitempty"`
	// * values for parameters used in filter expression
	Args []*mysqlxdatatypes.Scalar `protobuf:"bytes,11,rep,name=args" json:"args,omitempty"`
	// * filter criteria
	Criteria *mysqlxexpr.Expr `protobuf:"bytes,5,opt,name=criteria" json:"criteria,omitempty"`
	// * numbers of rows that shall be skipped and returned
	// (user can set one of: limit, limit_expr)
	Limit *Limit `protobuf:"bytes,6,opt,name=limit" json:"limit,omitempty"`
	// * sort-order in which the rows/document shall be returned in
	Order []*Order `protobuf:"bytes,7,rep,name=order" json:"order,omitempty"`
	// * column expression list for aggregation (GROUP BY)
	Grouping []*mysqlxexpr.Expr `protobuf:"bytes,8,rep,name=grouping" json:"grouping,omitempty"`
	// * filter criteria for aggregated groups
	GroupingCriteria *mysqlxexpr.Expr `protobuf:"bytes,9,opt,name=grouping_criteria,json=groupingCriteria" json:"grouping_criteria,omitempty"`
	// * perform row locking on matches
	Locking *Find_RowLock `protobuf:"varint,12,opt,name=locking,enum=Mysqlx.Crud.Find_RowLock" json:"locking,omitempty"`
	// * additional options how to handle locked rows
	LockingOptions *Find_RowLockOptions `protobuf:"varint,13,opt,name=locking_options,json=lockingOptions,enum=Mysqlx.Crud.Find_RowLockOptions" json:"locking_options,omitempty"`
	// * numbers of rows that shall be skipped and returned
	// (user can set one of: limit, limit_expr)
	LimitExpr *LimitExpr `protobuf:"bytes,14,opt,name=limit_expr,json=limitExpr" json:"limit_expr,omitempty"`
}

func (x *Find) Reset() {
	*x = Find{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_crud_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Find) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Find) ProtoMessage() {}

func (x *Find) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_crud_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Find.ProtoReflect.Descriptor instead.
func (*Find) Descriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{7}
}

func (x *Find) GetCollection() *Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

func (x *Find) GetDataModel() DataModel {
	if x != nil && x.DataModel != nil {
		return *x.DataModel
	}
	return DataModel_DOCUMENT
}

func (x *Find) GetProjection() []*Projection {
	if x != nil {
		return x.Projection
	}
	return nil
}

func (x *Find) GetArgs() []*mysqlxdatatypes.Scalar {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Find) GetCriteria() *mysqlxexpr.Expr {
	if x != nil {
		return x.Criteria
	}
	return nil
}

func (x *Find) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *Find) GetOrder() []*Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *Find) GetGrouping() []*mysqlxexpr.Expr {
	if x != nil {
		return x.Grouping
	}
	return nil
}

func (x *Find) GetGroupingCriteria() *mysqlxexpr.Expr {
	if x != nil {
		return x.GroupingCriteria
	}
	return nil
}

func (x *Find) GetLocking() Find_RowLock {
	if x != nil && x.Locking != nil {
		return *x.Locking
	}
	return Find_SHARED_LOCK
}

func (x *Find) GetLockingOptions() Find_RowLockOptions {
	if x != nil && x.LockingOptions != nil {
		return *x.LockingOptions
	}
	return Find_NOWAIT
}

func (x *Find) GetLimitExpr() *LimitExpr {
	if x != nil {
		return x.LimitExpr
	}
	return nil
}

// *
// Insert documents/rows into a collection/table
//
// @returns @ref Mysqlx::Resultset
type Insert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * collection to insert into
	Collection *Collection `protobuf:"bytes,1,req,name=collection" json:"collection,omitempty"`
	// * data model that the operations refer to
	DataModel *DataModel `protobuf:"varint,2,opt,name=data_model,json=dataModel,enum=Mysqlx.Crud.DataModel" json:"data_model,omitempty"`
	// * name of the columns to insert data into
	// (empty if data_model is DOCUMENT)
	Projection []*Column `protobuf:"bytes,3,rep,name=projection" json:"projection,omitempty"`
	// * set of rows to insert into the collection/table (a single expression
	// with a JSON document literal or an OBJECT expression)
	Row []*Insert_TypedRow `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
	// * values for parameters used in row expressions
	Args []*mysqlxdatatypes.Scalar `protobuf:"bytes,5,rep,name=args" json:"args,omitempty"`
	// * true if this should be treated as an Upsert
	// (that is, update on duplicate key)
	Upsert *bool `protobuf:"varint,6,opt,name=upsert,def=0" json:"upsert,omitempty"`
}

// Default values for Insert fields.
const (
	Default_Insert_Upsert = bool(false)
)

func (x *Insert) Reset() {
	*x = Insert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_crud_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Insert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Insert) ProtoMessage() {}

func (x *Insert) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_crud_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Insert.ProtoReflect.Descriptor instead.
func (*Insert) Descriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{8}
}

func (x *Insert) GetCollection() *Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

func (x *Insert) GetDataModel() DataModel {
	if x != nil && x.DataModel != nil {
		return *x.DataModel
	}
	return DataModel_DOCUMENT
}

func (x *Insert) GetProjection() []*Column {
	if x != nil {
		return x.Projection
	}
	return nil
}

func (x *Insert) GetRow() []*Insert_TypedRow {
	if x != nil {
		return x.Row
	}
	return nil
}

func (x *Insert) GetArgs() []*mysqlxdatatypes.Scalar {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Insert) GetUpsert() bool {
	if x != nil && x.Upsert != nil {
		return *x.Upsert
	}
	return Default_Insert_Upsert
}

// *
// Update documents/rows in a collection/table
//
// @returns @ref Mysqlx::Resultset
type Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * collection to change
	Collection *Collection `protobuf:"bytes,2,req,name=collection" json:"collection,omitempty"`
	// * datamodel that the operations refer to
	DataModel *DataModel `protobuf:"varint,3,opt,name=data_model,json=dataModel,enum=Mysqlx.Crud.DataModel" json:"data_model,omitempty"`
	// * filter expression to match rows that the operations will apply on
	Criteria *mysqlxexpr.Expr `protobuf:"bytes,4,opt,name=criteria" json:"criteria,omitempty"`
	// * limits the number of rows to match
	// (user can set one of: limit, limit_expr)
	Limit *Limit `protobuf:"bytes,5,opt,name=limit" json:"limit,omitempty"`
	// * specifies order of matched rows
	Order []*Order `protobuf:"bytes,6,rep,name=order" json:"order,omitempty"`
	// * list of operations to be applied.
	// Valid operations will depend on the data_model
	Operation []*UpdateOperation `protobuf:"bytes,7,rep,name=operation" json:"operation,omitempty"`
	// * values for parameters used in filter expression
	Args []*mysqlxdatatypes.Scalar `protobuf:"bytes,8,rep,name=args" json:"args,omitempty"`
	// * limits the number of rows to match
	// (user can set one of: limit, limit_expr)
	LimitExpr *LimitExpr `protobuf:"bytes,9,opt,name=limit_expr,json=limitExpr" json:"limit_expr,omitempty"`
}

func (x *Update) Reset() {
	*x = Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_crud_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update) ProtoMessage() {}

func (x *Update) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_crud_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update.ProtoReflect.Descriptor instead.
func (*Update) Descriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{9}
}

func (x *Update) GetCollection() *Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

func (x *Update) GetDataModel() DataModel {
	if x != nil && x.DataModel != nil {
		return *x.DataModel
	}
	return DataModel_DOCUMENT
}

func (x *Update) GetCriteria() *mysqlxexpr.Expr {
	if x != nil {
		return x.Criteria
	}
	return nil
}

func (x *Update) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *Update) GetOrder() []*Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *Update) GetOperation() []*UpdateOperation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *Update) GetArgs() []*mysqlxdatatypes.Scalar {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Update) GetLimitExpr() *LimitExpr {
	if x != nil {
		return x.LimitExpr
	}
	return nil
}

// *
// Delete documents/rows from a Collection/Table
//
// @returns @ref Mysqlx::Resultset
type Delete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * collection to change
	Collection *Collection `protobuf:"bytes,1,req,name=collection" json:"collection,omitempty"`
	// * data model that the operations refer to
	DataModel *DataModel `protobuf:"varint,2,opt,name=data_model,json=dataModel,enum=Mysqlx.Crud.DataModel" json:"data_model,omitempty"`
	// * filter expression to match rows that the operations will apply on
	Criteria *mysqlxexpr.Expr `protobuf:"bytes,3,opt,name=criteria" json:"criteria,omitempty"`
	// * limits the number of rows to match
	// (user can set one of: limit, limit_expr)
	Limit *Limit `protobuf:"bytes,4,opt,name=limit" json:"limit,omitempty"`
	// * specifies order of matched rows
	Order []*Order `protobuf:"bytes,5,rep,name=order" json:"order,omitempty"`
	// * values for parameters used in filter expression
	Args []*mysqlxdatatypes.Scalar `protobuf:"bytes,6,rep,name=args" json:"args,omitempty"`
	// * limits the number of rows to match
	// (user can set one of: limit, limit_expr)
	LimitExpr *LimitExpr `protobuf:"bytes,7,opt,name=limit_expr,json=limitExpr" json:"limit_expr,omitempty"`
}

func (x *Delete) Reset() {
	*x = Delete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_crud_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Delete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delete) ProtoMessage() {}

func (x *Delete) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_crud_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delete.ProtoReflect.Descriptor instead.
func (*Delete) Descriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{10}
}

func (x *Delete) GetCollection() *Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

func (x *Delete) GetDataModel() DataModel {
	if x != nil && x.DataModel != nil {
		return *x.DataModel
	}
	return DataModel_DOCUMENT
}

func (x *Delete) GetCriteria() *mysqlxexpr.Expr {
	if x != nil {
		return x.Criteria
	}
	return nil
}

func (x *Delete) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *Delete) GetOrder() []*Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *Delete) GetArgs() []*mysqlxdatatypes.Scalar {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Delete) GetLimitExpr() *LimitExpr {
	if x != nil {
		return x.LimitExpr
	}
	return nil
}

// *
// CreateView create view based on indicated @ref Mysqlx::Crud::Find message
type CreateView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * name of the VIEW object, which should be created
	Collection *Collection `protobuf:"bytes,1,req,name=collection" json:"collection,omitempty"`
	// * user name of the definer, if the value isn't set then the definer
	// is current user
	Definer *string `protobuf:"bytes,2,opt,name=definer" json:"definer,omitempty"`
	// * defines how MySQL Server processes the view
	Algorithm *ViewAlgorithm `protobuf:"varint,3,opt,name=algorithm,enum=Mysqlx.Crud.ViewAlgorithm,def=1" json:"algorithm,omitempty"`
	// * defines the security context in which the view is going be executed
	Security *ViewSqlSecurity `protobuf:"varint,4,opt,name=security,enum=Mysqlx.Crud.ViewSqlSecurity,def=2" json:"security,omitempty"`
	// * limits the write operations done on a VIEW
	Check *ViewCheckOption `protobuf:"varint,5,opt,name=check,enum=Mysqlx.Crud.ViewCheckOption" json:"check,omitempty"`
	// * defines the list of aliases for column names specified in `stmt`
	Column []string `protobuf:"bytes,6,rep,name=column" json:"column,omitempty"`
	// * Mysqlx.Crud.Find message from which the SELECT statement
	// is going to be build
	Stmt *Find `protobuf:"bytes,7,req,name=stmt" json:"stmt,omitempty"`
	// * if true then suppress error when created view already exists;
	// just replace it
	ReplaceExisting *bool `protobuf:"varint,8,opt,name=replace_existing,json=replaceExisting,def=0" json:"replace_existing,omitempty"`
}

// Default values for CreateView fields.
const (
	Default_CreateView_Algorithm       = ViewAlgorithm_UNDEFINED
	Default_CreateView_Security        = ViewSqlSecurity_DEFINER
	Default_CreateView_ReplaceExisting = bool(false)
)

func (x *CreateView) Reset() {
	*x = CreateView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_crud_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateView) ProtoMessage() {}

func (x *CreateView) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_crud_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateView.ProtoReflect.Descriptor instead.
func (*CreateView) Descriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{11}
}

func (x *CreateView) GetCollection() *Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

func (x *CreateView) GetDefiner() string {
	if x != nil && x.Definer != nil {
		return *x.Definer
	}
	return ""
}

func (x *CreateView) GetAlgorithm() ViewAlgorithm {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return Default_CreateView_Algorithm
}

func (x *CreateView) GetSecurity() ViewSqlSecurity {
	if x != nil && x.Security != nil {
		return *x.Security
	}
	return Default_CreateView_Security
}

func (x *CreateView) GetCheck() ViewCheckOption {
	if x != nil && x.Check != nil {
		return *x.Check
	}
	return ViewCheckOption_LOCAL
}

func (x *CreateView) GetColumn() []string {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *CreateView) GetStmt() *Find {
	if x != nil {
		return x.Stmt
	}
	return nil
}

func (x *CreateView) GetReplaceExisting() bool {
	if x != nil && x.ReplaceExisting != nil {
		return *x.ReplaceExisting
	}
	return Default_CreateView_ReplaceExisting
}

// *
// ModifyView modify existing view based on indicated
// @ref Mysqlx::Crud::Find message
type ModifyView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * name of the VIEW object, which should be modified
	Collection *Collection `protobuf:"bytes,1,req,name=collection" json:"collection,omitempty"`
	// * user name of the definer,
	// if the value isn't set then the definer is current user
	Definer *string `protobuf:"bytes,2,opt,name=definer" json:"definer,omitempty"`
	// * defined how MySQL Server processes the view
	Algorithm *ViewAlgorithm `protobuf:"varint,3,opt,name=algorithm,enum=Mysqlx.Crud.ViewAlgorithm" json:"algorithm,omitempty"`
	// * defines the security context in which the view is going be executed
	Security *ViewSqlSecurity `protobuf:"varint,4,opt,name=security,enum=Mysqlx.Crud.ViewSqlSecurity" json:"security,omitempty"`
	// * limits the write operations done on a VIEW
	Check *ViewCheckOption `protobuf:"varint,5,opt,name=check,enum=Mysqlx.Crud.ViewCheckOption" json:"check,omitempty"`
	// * defines the list of aliases for column names specified in `stmt`
	Column []string `protobuf:"bytes,6,rep,name=column" json:"column,omitempty"`
	// * Mysqlx.Crud.Find message from which the SELECT statement
	// is going to be build
	Stmt *Find `protobuf:"bytes,7,opt,name=stmt" json:"stmt,omitempty"`
}

func (x *ModifyView) Reset() {
	*x = ModifyView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_crud_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyView) ProtoMessage() {}

func (x *ModifyView) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_crud_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyView.ProtoReflect.Descriptor instead.
func (*ModifyView) Descriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{12}
}

func (x *ModifyView) GetCollection() *Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

func (x *ModifyView) GetDefiner() string {
	if x != nil && x.Definer != nil {
		return *x.Definer
	}
	return ""
}

func (x *ModifyView) GetAlgorithm() ViewAlgorithm {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return ViewAlgorithm_UNDEFINED
}

func (x *ModifyView) GetSecurity() ViewSqlSecurity {
	if x != nil && x.Security != nil {
		return *x.Security
	}
	return ViewSqlSecurity_INVOKER
}

func (x *ModifyView) GetCheck() ViewCheckOption {
	if x != nil && x.Check != nil {
		return *x.Check
	}
	return ViewCheckOption_LOCAL
}

func (x *ModifyView) GetColumn() []string {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *ModifyView) GetStmt() *Find {
	if x != nil {
		return x.Stmt
	}
	return nil
}

// *
// DropView removing existing view
type DropView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * name of the VIEW object, which should be deleted
	Collection *Collection `protobuf:"bytes,1,req,name=collection" json:"collection,omitempty"`
	// * if true then suppress error when deleted view does not exists
	IfExists *bool `protobuf:"varint,2,opt,name=if_exists,json=ifExists,def=0" json:"if_exists,omitempty"`
}

// Default values for DropView fields.
const (
	Default_DropView_IfExists = bool(false)
)

func (x *DropView) Reset() {
	*x = DropView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_crud_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropView) ProtoMessage() {}

func (x *DropView) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_crud_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropView.ProtoReflect.Descriptor instead.
func (*DropView) Descriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{13}
}

func (x *DropView) GetCollection() *Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

func (x *DropView) GetIfExists() bool {
	if x != nil && x.IfExists != nil {
		return *x.IfExists
	}
	return Default_DropView_IfExists
}

// * set of fields to insert as a one row
type Insert_TypedRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field []*mysqlxexpr.Expr `protobuf:"bytes,1,rep,name=field" json:"field,omitempty"`
}

func (x *Insert_TypedRow) Reset() {
	*x = Insert_TypedRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlx_crud_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Insert_TypedRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Insert_TypedRow) ProtoMessage() {}

func (x *Insert_TypedRow) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlx_crud_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Insert_TypedRow.ProtoReflect.Descriptor instead.
func (*Insert_TypedRow) Descriptor() ([]byte, []int) {
	return file_mysqlx_crud_proto_rawDescGZIP(), []int{8, 0}
}

func (x *Insert_TypedRow) GetField() []*mysqlxexpr.Expr {
	if x != nil {
		return x.Field
	}
	return nil
}

var File_mysqlx_crud_proto protoreflect.FileDescriptor

var file_mysqlx_crud_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x5f, 0x63, 0x72, 0x75, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75, 0x64,
	0x1a, 0x0c, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x6d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x76, 0x0a, 0x06, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x42, 0x0a,
	0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x22, 0x4d, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x22, 0x38, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x3c, 0x0a, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x66, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x45, 0x78, 0x70, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x78, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x08, 0x72, 0x6f, 0x77,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0x8f, 0x01, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x04, 0x65, 0x78,
	0x70, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x78, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70,
	0x72, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x43, 0x72,
	0x75, 0x64, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x03, 0x41, 0x53, 0x43, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43,
	0x10, 0x02, 0x22, 0xc6, 0x02, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x45, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8b, 0x01,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45,
	0x4d, 0x4f, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53,
	0x45, 0x54, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x41, 0x43, 0x45, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4d,
	0x45, 0x52, 0x47, 0x45, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f,
	0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x52, 0x52, 0x41,
	0x59, 0x5f, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x45,
	0x52, 0x47, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x08, 0x22, 0xeb, 0x05, 0x0a, 0x04,
	0x46, 0x69, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x78, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x78, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x79,
	0x73, 0x71, 0x6c, 0x78, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x63,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x28, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x79, 0x73, 0x71,
	0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75,
	0x64, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2d,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a,
	0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x78, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x10, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x33, 0x0a,
	0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x2e, 0x52, 0x6f, 0x77, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x49, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x4d, 0x79,
	0x73, 0x71, 0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x2e, 0x52,
	0x6f, 0x77, 0x4c, 0x6f, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x6c,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a,
	0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x70, 0x72, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x45, 0x78, 0x70, 0x72, 0x22, 0x2e, 0x0a, 0x07, 0x52, 0x6f, 0x77, 0x4c, 0x6f, 0x63, 0x6b, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x4f,
	0x43, 0x4b, 0x10, 0x02, 0x22, 0x2d, 0x0a, 0x0e, 0x52, 0x6f, 0x77, 0x4c, 0x6f, 0x63, 0x6b, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x57, 0x41, 0x49, 0x54,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45,
	0x44, 0x10, 0x02, 0x3a, 0x04, 0x88, 0xea, 0x30, 0x11, 0x22, 0xe5, 0x02, 0x0a, 0x06, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x78, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x78, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x72, 0x6f, 0x77,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e,
	0x43, 0x72, 0x75, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x64, 0x52, 0x6f, 0x77, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06,
	0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x1a, 0x33, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x64, 0x52,
	0x6f, 0x77, 0x12, 0x27, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x3a, 0x04, 0x88, 0xea, 0x30,
	0x12, 0x22, 0xa2, 0x03, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0a,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x4d, 0x79, 0x73, 0x71,
	0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x08,
	0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x28, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x79, 0x73,
	0x71, 0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x43, 0x72,
	0x75, 0x64, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75, 0x64,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x79, 0x73, 0x71,
	0x6c, 0x78, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x45, 0x78, 0x70, 0x72, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x70, 0x72,
	0x3a, 0x04, 0x88, 0xea, 0x30, 0x13, 0x22, 0xe6, 0x02, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x43,
	0x72, 0x75, 0x64, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x12, 0x28, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x79, 0x73, 0x71,
	0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e,
	0x43, 0x72, 0x75, 0x64, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x70, 0x72, 0x52, 0x09,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x70, 0x72, 0x3a, 0x04, 0x88, 0xea, 0x30, 0x14, 0x22,
	0x92, 0x03, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x37,
	0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75, 0x64,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x72, 0x12, 0x43, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x43, 0x72,
	0x75, 0x64, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x3a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x52, 0x09, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x41, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x78, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x53, 0x71, 0x6c, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x07, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x52,
	0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x78, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x07, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75,
	0x64, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x73, 0x74, 0x6d, 0x74, 0x12, 0x30, 0x0a, 0x10,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x04,
	0x88, 0xea, 0x30, 0x1e, 0x22, 0xcc, 0x02, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x56,
	0x69, 0x65, 0x77, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78,
	0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x4d, 0x79, 0x73, 0x71,
	0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x12, 0x38, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75, 0x64,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x4d, 0x79, 0x73, 0x71,
	0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75, 0x64, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x43, 0x72,
	0x75, 0x64, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x73, 0x74, 0x6d, 0x74, 0x3a, 0x04, 0x88,
	0xea, 0x30, 0x1f, 0x22, 0x6d, 0x0a, 0x08, 0x44, 0x72, 0x6f, 0x70, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x78, 0x2e, 0x43, 0x72, 0x75,
	0x64, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x09, 0x69, 0x66, 0x5f, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x08, 0x69, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x3a, 0x04, 0x88, 0xea,
	0x30, 0x20, 0x2a, 0x24, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x38, 0x0a, 0x0d, 0x56, 0x69, 0x65, 0x77,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x45, 0x52, 0x47,
	0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x03, 0x2a, 0x2b, 0x0a, 0x0f, 0x56, 0x69, 0x65, 0x77, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x4f, 0x4b, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x2a,
	0x2a, 0x0a, 0x0f, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x41, 0x53, 0x43, 0x41, 0x44, 0x45, 0x44, 0x10, 0x02, 0x42, 0x19, 0x0a, 0x17, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x63, 0x6a, 0x2e, 0x78, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
}

var (
	file_mysqlx_crud_proto_rawDescOnce sync.Once
	file_mysqlx_crud_proto_rawDescData = file_mysqlx_crud_proto_rawDesc
)

func file_mysqlx_crud_proto_rawDescGZIP() []byte {
	file_mysqlx_crud_proto_rawDescOnce.Do(func() {
		file_mysqlx_crud_proto_rawDescData = protoimpl.X.CompressGZIP(file_mysqlx_crud_proto_rawDescData)
	})
	return file_mysqlx_crud_proto_rawDescData
}

var file_mysqlx_crud_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_mysqlx_crud_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_mysqlx_crud_proto_goTypes = []interface{}{
	(DataModel)(0),                      // 0: Mysqlx.Crud.DataModel
	(ViewAlgorithm)(0),                  // 1: Mysqlx.Crud.ViewAlgorithm
	(ViewSqlSecurity)(0),                // 2: Mysqlx.Crud.ViewSqlSecurity
	(ViewCheckOption)(0),                // 3: Mysqlx.Crud.ViewCheckOption
	(Order_Direction)(0),                // 4: Mysqlx.Crud.Order.Direction
	(UpdateOperation_UpdateType)(0),     // 5: Mysqlx.Crud.UpdateOperation.UpdateType
	(Find_RowLock)(0),                   // 6: Mysqlx.Crud.Find.RowLock
	(Find_RowLockOptions)(0),            // 7: Mysqlx.Crud.Find.RowLockOptions
	(*Column)(nil),                      // 8: Mysqlx.Crud.Column
	(*Projection)(nil),                  // 9: Mysqlx.Crud.Projection
	(*Collection)(nil),                  // 10: Mysqlx.Crud.Collection
	(*Limit)(nil),                       // 11: Mysqlx.Crud.Limit
	(*LimitExpr)(nil),                   // 12: Mysqlx.Crud.LimitExpr
	(*Order)(nil),                       // 13: Mysqlx.Crud.Order
	(*UpdateOperation)(nil),             // 14: Mysqlx.Crud.UpdateOperation
	(*Find)(nil),                        // 15: Mysqlx.Crud.Find
	(*Insert)(nil),                      // 16: Mysqlx.Crud.Insert
	(*Update)(nil),                      // 17: Mysqlx.Crud.Update
	(*Delete)(nil),                      // 18: Mysqlx.Crud.Delete
	(*CreateView)(nil),                  // 19: Mysqlx.Crud.CreateView
	(*ModifyView)(nil),                  // 20: Mysqlx.Crud.ModifyView
	(*DropView)(nil),                    // 21: Mysqlx.Crud.DropView
	(*Insert_TypedRow)(nil),             // 22: Mysqlx.Crud.Insert.TypedRow
	(*mysqlxexpr.DocumentPathItem)(nil), // 23: Mysqlx.Expr.DocumentPathItem
	(*mysqlxexpr.Expr)(nil),             // 24: Mysqlx.Expr.Expr
	(*mysqlxexpr.ColumnIdentifier)(nil), // 25: Mysqlx.Expr.ColumnIdentifier
	(*mysqlxdatatypes.Scalar)(nil),      // 26: Mysqlx.Datatypes.Scalar
}
var file_mysqlx_crud_proto_depIdxs = []int32{
	23, // 0: Mysqlx.Crud.Column.document_path:type_name -> Mysqlx.Expr.DocumentPathItem
	24, // 1: Mysqlx.Crud.Projection.source:type_name -> Mysqlx.Expr.Expr
	24, // 2: Mysqlx.Crud.LimitExpr.row_count:type_name -> Mysqlx.Expr.Expr
	24, // 3: Mysqlx.Crud.LimitExpr.offset:type_name -> Mysqlx.Expr.Expr
	24, // 4: Mysqlx.Crud.Order.expr:type_name -> Mysqlx.Expr.Expr
	4,  // 5: Mysqlx.Crud.Order.direction:type_name -> Mysqlx.Crud.Order.Direction
	25, // 6: Mysqlx.Crud.UpdateOperation.source:type_name -> Mysqlx.Expr.ColumnIdentifier
	5,  // 7: Mysqlx.Crud.UpdateOperation.operation:type_name -> Mysqlx.Crud.UpdateOperation.UpdateType
	24, // 8: Mysqlx.Crud.UpdateOperation.value:type_name -> Mysqlx.Expr.Expr
	10, // 9: Mysqlx.Crud.Find.collection:type_name -> Mysqlx.Crud.Collection
	0,  // 10: Mysqlx.Crud.Find.data_model:type_name -> Mysqlx.Crud.DataModel
	9,  // 11: Mysqlx.Crud.Find.projection:type_name -> Mysqlx.Crud.Projection
	26, // 12: Mysqlx.Crud.Find.args:type_name -> Mysqlx.Datatypes.Scalar
	24, // 13: Mysqlx.Crud.Find.criteria:type_name -> Mysqlx.Expr.Expr
	11, // 14: Mysqlx.Crud.Find.limit:type_name -> Mysqlx.Crud.Limit
	13, // 15: Mysqlx.Crud.Find.order:type_name -> Mysqlx.Crud.Order
	24, // 16: Mysqlx.Crud.Find.grouping:type_name -> Mysqlx.Expr.Expr
	24, // 17: Mysqlx.Crud.Find.grouping_criteria:type_name -> Mysqlx.Expr.Expr
	6,  // 18: Mysqlx.Crud.Find.locking:type_name -> Mysqlx.Crud.Find.RowLock
	7,  // 19: Mysqlx.Crud.Find.locking_options:type_name -> Mysqlx.Crud.Find.RowLockOptions
	12, // 20: Mysqlx.Crud.Find.limit_expr:type_name -> Mysqlx.Crud.LimitExpr
	10, // 21: Mysqlx.Crud.Insert.collection:type_name -> Mysqlx.Crud.Collection
	0,  // 22: Mysqlx.Crud.Insert.data_model:type_name -> Mysqlx.Crud.DataModel
	8,  // 23: Mysqlx.Crud.Insert.projection:type_name -> Mysqlx.Crud.Column
	22, // 24: Mysqlx.Crud.Insert.row:type_name -> Mysqlx.Crud.Insert.TypedRow
	26, // 25: Mysqlx.Crud.Insert.args:type_name -> Mysqlx.Datatypes.Scalar
	10, // 26: Mysqlx.Crud.Update.collection:type_name -> Mysqlx.Crud.Collection
	0,  // 27: Mysqlx.Crud.Update.data_model:type_name -> Mysqlx.Crud.DataModel
	24, // 28: Mysqlx.Crud.Update.criteria:type_name -> Mysqlx.Expr.Expr
	11, // 29: Mysqlx.Crud.Update.limit:type_name -> Mysqlx.Crud.Limit
	13, // 30: Mysqlx.Crud.Update.order:type_name -> Mysqlx.Crud.Order
	14, // 31: Mysqlx.Crud.Update.operation:type_name -> Mysqlx.Crud.UpdateOperation
	26, // 32: Mysqlx.Crud.Update.args:type_name -> Mysqlx.Datatypes.Scalar
	12, // 33: Mysqlx.Crud.Update.limit_expr:type_name -> Mysqlx.Crud.LimitExpr
	10, // 34: Mysqlx.Crud.Delete.collection:type_name -> Mysqlx.Crud.Collection
	0,  // 35: Mysqlx.Crud.Delete.data_model:type_name -> Mysqlx.Crud.DataModel
	24, // 36: Mysqlx.Crud.Delete.criteria:type_name -> Mysqlx.Expr.Expr
	11, // 37: Mysqlx.Crud.Delete.limit:type_name -> Mysqlx.Crud.Limit
	13, // 38: Mysqlx.Crud.Delete.order:type_name -> Mysqlx.Crud.Order
	26, // 39: Mysqlx.Crud.Delete.args:type_name -> Mysqlx.Datatypes.Scalar
	12, // 40: Mysqlx.Crud.Delete.limit_expr:type_name -> Mysqlx.Crud.LimitExpr
	10, // 41: Mysqlx.Crud.CreateView.collection:type_name -> Mysqlx.Crud.Collection
	1,  // 42: Mysqlx.Crud.CreateView.algorithm:type_name -> Mysqlx.Crud.ViewAlgorithm
	2,  // 43: Mysqlx.Crud.CreateView.security:type_name -> Mysqlx.Crud.ViewSqlSecurity
	3,  // 44: Mysqlx.Crud.CreateView.check:type_name -> Mysqlx.Crud.ViewCheckOption
	15, // 45: Mysqlx.Crud.CreateView.stmt:type_name -> Mysqlx.Crud.Find
	10, // 46: Mysqlx.Crud.ModifyView.collection:type_name -> Mysqlx.Crud.Collection
	1,  // 47: Mysqlx.Crud.ModifyView.algorithm:type_name -> Mysqlx.Crud.ViewAlgorithm
	2,  // 48: Mysqlx.Crud.ModifyView.security:type_name -> Mysqlx.Crud.ViewSqlSecurity
	3,  // 49: Mysqlx.Crud.ModifyView.check:type_name -> Mysqlx.Crud.ViewCheckOption
	15, // 50: Mysqlx.Crud.ModifyView.stmt:type_name -> Mysqlx.Crud.Find
	10, // 51: Mysqlx.Crud.DropView.collection:type_name -> Mysqlx.Crud.Collection
	24, // 52: Mysqlx.Crud.Insert.TypedRow.field:type_name -> Mysqlx.Expr.Expr
	53, // [53:53] is the sub-list for method output_type
	53, // [53:53] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_mysqlx_crud_proto_init() }
func file_mysqlx_crud_proto_init() {
	if File_mysqlx_crud_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mysqlx_crud_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_crud_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Projection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_crud_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_crud_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Limit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_crud_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_crud_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_crud_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_crud_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Find); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_crud_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Insert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_crud_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_crud_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Delete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_crud_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_crud_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_crud_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlx_crud_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Insert_TypedRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mysqlx_crud_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mysqlx_crud_proto_goTypes,
		DependencyIndexes: file_mysqlx_crud_proto_depIdxs,
		EnumInfos:         file_mysqlx_crud_proto_enumTypes,
		MessageInfos:      file_mysqlx_crud_proto_msgTypes,
	}.Build()
	File_mysqlx_crud_proto = out.File
	file_mysqlx_crud_proto_rawDesc = nil
	file_mysqlx_crud_proto_goTypes = nil
	file_mysqlx_crud_proto_depIdxs = nil
}
